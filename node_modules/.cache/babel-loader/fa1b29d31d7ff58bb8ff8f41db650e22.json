{"ast":null,"code":"var _jsxFileName = \"/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js\";\nimport './CBased.css';\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CBased extends Component {\n  constructor() {\n    super();\n    this.state = {\n      songs: [],\n      songs_audio: [],\n      songs_img: [],\n      artName: []\n    };\n  } //getSongData(songIDS,accessToken,genres,artistID) {\n\n\n  componentDidMount() {\n    let songIDS = this.props.songID;\n    let accessToken = this.props.token;\n    let artistID = this.props.artistID;\n    let genres = this.props.genres; // Get audio analysis features from the user's songs\n\n    const energy = []; //low level feature\n\n    const key = []; //high level feature\n\n    const loudness = []; //low level feature -- can be negative\n\n    const acoustic = []; //low level feature (?)\n\n    const instrum = []; //low level feature (?)\n\n    const liveness = []; //low level feature (?)\n\n    const valence = []; //low level feature (?)\n\n    const tempo = []; //high level feature\n\n    const duration = []; //song duration in ms!\n\n    const recom_songs = [];\n    const recom_songs_audio = [];\n    const recom_songs_img = [];\n    const artistName = [];\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(response => response.json()) //.then(data => console.log(data.audio_features));\n    .then(data => {\n      // if(!data.audio_features){\n      //     return;\n      //   }else{\n      //console.log(data.audio_features)\n      data.audio_features.map((audio, i) => {\n        // if(!audio){\n        //   return;\n        // }\n        energy.push(Number(audio.energy));\n        key.push(audio.key);\n        loudness.push(audio.loudness);\n        acoustic.push(audio.acousticness);\n        instrum.push(audio.instrumentalness);\n        liveness.push(audio.liveness);\n        valence.push(audio.valence);\n        tempo.push(audio.tempo);\n        duration.push(audio.duration_ms);\n      });\n      const avg_energy = (energy.reduce((sum, curr) => sum + curr, 0) / energy.length).toFixed(3);\n      const avg_key = (key.reduce((sum, curr) => sum + curr, 0) / key.length).toFixed();\n      const avg_loud = (loudness.reduce((sum, curr) => sum + curr, 0) / loudness.length).toFixed(3);\n      const avg_acous = (acoustic.reduce((sum, curr) => sum + curr, 0) / acoustic.length).toFixed(3);\n      const avg_instr = (instrum.reduce((sum, curr) => sum + curr, 0) / instrum.length).toFixed(3);\n      const avg_liveness = (liveness.reduce((sum, curr) => sum + curr, 0) / liveness.length).toFixed(3);\n      const avg_val = (valence.reduce((sum, curr) => sum + curr, 0) / valence.length).toFixed(3);\n      const avg_tempo = (tempo.reduce((sum, curr) => sum + curr, 0) / tempo.length).toFixed(3);\n      const avg_duration = (duration.reduce((sum, curr) => sum + curr, 0) / duration.length).toFixed(); // Get the most popular genre of the user\n\n      const words = genres.split(',');\n      const wordCounts = {};\n\n      for (var i = 0; i < words.length; i++) wordCounts[words[i]] = (wordCounts[words[i]] || 0) + 1;\n\n      const getMax = object => {\n        return Object.keys(object).filter(x => {\n          return object[x] == Math.max.apply(null, Object.values(object));\n        });\n      };\n\n      const userGenre = getMax(wordCounts).toString();\n      const song_seed = songIDS.split(','); //get user's top song for recommendation seed\n\n      console.log(artistID); // Get 20 recommendations of content based for the user\n\n      fetch(\"https://api.spotify.com/v1/recommendations?limit=20&market=ES&seed_artists=\" + artistID + \"&seed_genres=\" + userGenre + \"&seed_tracks=\" + song_seed[0] + \"&target_acousticness=\" + avg_acous + \"&target_duration_ms=\" + avg_duration + \"&target_energy=\" + avg_energy + \"&target_instrumentalness=\" + avg_instr + \"&target_key=\" + avg_key + \"&target_liveness=\" + avg_liveness + \"&target_loudness=\" + avg_loud + \"&target_tempo=\" + avg_tempo + \"&target_valence=\" + avg_val, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + accessToken\n        }\n      }).then(response => response.json()) //.then(data => console.log(data))\n      .then(data => {\n        if (!data) {\n          return;\n        } else {\n          console.log(data);\n          data.tracks.map(song => {\n            recom_songs.push(song.name); // song name\n\n            recom_songs_audio.push(song.preview_url); // audio sample of song\n\n            recom_songs_img.push(song.album.images[2].url); // small album image\n\n            artistName.push(song.artists[0].name);\n          });\n          this.setState({\n            songs: recom_songs,\n            songs_img: recom_songs_img,\n            songs_audio: recom_songs_audio,\n            artName: artistName\n          });\n        }\n      }); //console.log([recom_songs, recom_songs_audio, recom_songs_img]);\n    });\n  }\n\n  render() {\n    // let ids = this.props.songID\n    // let token = this.props.token\n    // let artistID = this.props.artistID\n    // let genres = this.props.genres\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CB\",\n      children: Object.keys(this.state.songs).map(index => {\n        return /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: this.state.songs_audio[index],\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.songs_img[index],\n              style: {\n                width: '60px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this), \" \", this.state.songs[index], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 106\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CBased;","map":{"version":3,"sources":["/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js"],"names":["React","Component","CBased","constructor","state","songs","songs_audio","songs_img","artName","componentDidMount","songIDS","props","songID","accessToken","token","artistID","genres","energy","key","loudness","acoustic","instrum","liveness","valence","tempo","duration","recom_songs","recom_songs_audio","recom_songs_img","artistName","fetch","method","headers","then","response","json","data","audio_features","map","audio","i","push","Number","acousticness","instrumentalness","duration_ms","avg_energy","reduce","sum","curr","length","toFixed","avg_key","avg_loud","avg_acous","avg_instr","avg_liveness","avg_val","avg_tempo","avg_duration","words","split","wordCounts","getMax","object","Object","keys","filter","x","Math","max","apply","values","userGenre","toString","song_seed","console","log","tracks","song","name","preview_url","album","images","url","artists","setState","render","index","width"],"mappings":"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","sourcesContent":["import './CBased.css';\nimport React, {Component} from \"react\";\n\n\n\nclass CBased extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n      songs:[],\n      songs_audio:[],\n      songs_img:[],\n      artName:[]\n    }\n  }\n\n  //getSongData(songIDS,accessToken,genres,artistID) {\n  componentDidMount() {\n\n    let songIDS = this.props.songID\n    let accessToken = this.props.token\n    let artistID = this.props.artistID\n    let genres = this.props.genres\n\n    // Get audio analysis features from the user's songs\n    const energy = [];      //low level feature\n    const key = [];         //high level feature\n    const loudness = [];    //low level feature -- can be negative\n    const acoustic = [];    //low level feature (?)\n    const instrum = [];     //low level feature (?)\n    const liveness = [];    //low level feature (?)\n    const valence = [];     //low level feature (?)\n    const tempo = [];       //high level feature\n    const duration = [];    //song duration in ms!\n\n    const recom_songs = [];\n    const recom_songs_audio = [];\n    const recom_songs_img = [];\n    const artistName = [];\n\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {'Accept': 'application/json', 'Content-Type': 'application/json' , 'Authorization': 'Bearer ' + accessToken}\n    }).then(response => response.json())\n    //.then(data => console.log(data.audio_features));\n    .then(data => {\n      // if(!data.audio_features){\n      //     return;\n      //   }else{\n          //console.log(data.audio_features)\n          data.audio_features.map((audio, i) => {\n            // if(!audio){\n            //   return;\n            // }\n            energy.push(Number(audio.energy))\n            key.push(audio.key)\n            loudness.push(audio.loudness)\n            acoustic.push(audio.acousticness)\n            instrum.push(audio.instrumentalness)\n            liveness.push(audio.liveness)\n            valence.push(audio.valence)\n            tempo.push(audio.tempo)\n            duration.push(audio.duration_ms)\n          });\n          const avg_energy = (energy.reduce((sum, curr) => sum + curr, 0)/energy.length).toFixed(3) ;            \n          const avg_key = (key.reduce((sum, curr) => sum + curr, 0)/key.length).toFixed() ;                     \n          const avg_loud = (loudness.reduce((sum, curr) => sum + curr, 0)/loudness.length).toFixed(3) ;          \n          const avg_acous = (acoustic.reduce((sum, curr) => sum + curr, 0)/acoustic.length).toFixed(3) ;           \n          const avg_instr = (instrum.reduce((sum, curr) => sum + curr, 0)/instrum.length).toFixed(3) ;           \n          const avg_liveness = (liveness.reduce((sum, curr) => sum + curr, 0)/liveness.length).toFixed(3) ;      \n          const avg_val = (valence.reduce((sum, curr) => sum + curr, 0)/valence.length).toFixed(3) ;\n          const avg_tempo = (tempo.reduce((sum, curr) => sum + curr, 0)/tempo.length).toFixed(3) ;\n          const avg_duration = (duration.reduce((sum, curr) => sum + curr, 0)/duration.length).toFixed() ;      \n\n          // Get the most popular genre of the user\n          const words = genres.split(',');\n          const wordCounts = { };\n\n          for(var i = 0; i < words.length; i++)\n            wordCounts[words[i]] = (wordCounts[words[i]] || 0) + 1;\n\n          const getMax = object => {\n            return Object.keys(object).filter(x => {\n                 return object[x] == Math.max.apply(null, \n                 Object.values(object));\n            });\n          };\n\n          const userGenre = getMax(wordCounts).toString();\n          const song_seed = songIDS.split(','); //get user's top song for recommendation seed\n          console.log(artistID)\n          // Get 20 recommendations of content based for the user\n          fetch(\"https://api.spotify.com/v1/recommendations?limit=20&market=ES&seed_artists=\" + artistID + \"&seed_genres=\" + userGenre +\n                    \"&seed_tracks=\" + song_seed[0] + \"&target_acousticness=\" + avg_acous + \"&target_duration_ms=\" + avg_duration + \n                    \"&target_energy=\" + avg_energy + \"&target_instrumentalness=\" + avg_instr + \"&target_key=\" + avg_key + \"&target_liveness=\" + avg_liveness +\n                    \"&target_loudness=\" + avg_loud + \"&target_tempo=\" + avg_tempo + \"&target_valence=\" + avg_val, {\n              method: 'GET',\n              headers: {'Accept': 'application/json', 'Content-Type': 'application/json' ,'Authorization': 'Bearer ' + accessToken}\n          }).then(response => response.json())\n          //.then(data => console.log(data))\n          .then(data => {\n            if(!data){\n              return;\n            }else{\n              console.log(data)\n              data.tracks.map(song =>{\n                recom_songs.push(song.name)                       // song name\n                recom_songs_audio.push(song.preview_url)          // audio sample of song\n                recom_songs_img.push(song.album.images[2].url)    // small album image\n                artistName.push(song.artists[0].name)\n              })\n\n              this.setState({\n                songs: recom_songs,\n                songs_img: recom_songs_img,\n                songs_audio: recom_songs_audio,\n                artName: artistName\n              })\n            }\n          });\n          //console.log([recom_songs, recom_songs_audio, recom_songs_img]);\n    });\n  }\n\n\n  render() {\n\t   \n    // let ids = this.props.songID\n    // let token = this.props.token\n    // let artistID = this.props.artistID\n    // let genres = this.props.genres\n    \n\n    return(\n      \n      <div className=\"CB\">\n      \n            \n      {\n        Object.keys(this.state.songs).map(index =>{\n          return (\n            <ul>\n              <a href={this.state.songs_audio[index]} target={\"_blank\"} rel=\"noreferrer\">\n              <img src={this.state.songs_img[index]} style={{width: '60px'}}/> {this.state.songs[index]} <br />\n              </a>\n            </ul>\n          )\n        })\n      }\n      \n      </div>\n      \n    );\n\n\n  }\n    \n}\n\nexport default CBased;"]},"metadata":{},"sourceType":"module"}