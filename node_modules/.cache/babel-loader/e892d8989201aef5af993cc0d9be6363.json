{"ast":null,"code":"var _jsxFileName = \"/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js\";\nimport './CBased.css';\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CBased extends Component {\n  getSongData(songIDS, accessToken) {\n    // Get audio analysis features from the user's songs\n    const energy = []; //low level feature\n\n    const key = []; //high level feature\n\n    const loudness = []; //low level feature -- can be negative\n\n    const acoustic = []; //low level feature (?)\n\n    const instrum = []; //low level feature (?)\n\n    const liveness = []; //low level feature (?)\n\n    const valence = []; //low level feature (?)\n\n    const tempo = []; //high level feature\n\n    const duration = []; //song duration in ms!\n\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(response => response.json()) //.then(data => console.log(data.audio_features));\n    .then(data => {\n      data.audio_features.map((audio, i) => {\n        energy.push(Number(audio.energy));\n        key.push(audio.key);\n        loudness.push(audio.loudness);\n        acoustic.push(audio.acousticness);\n        instrum.push(audio.instrumentalness);\n        liveness.push(audio.liveness);\n        valence.push(audio.valence);\n        tempo.push(audio.tempo);\n        duration.push(audio.duration_ms);\n      });\n      const avg_energy = energy.reduce((sum, curr) => sum + curr, 0) / energy.length;\n      const avg_key = key.reduce((sum, curr) => sum + curr, 0) / key.length;\n      const avg_loud = loudness.reduce((sum, curr) => sum + curr, 0) / loudness.length;\n      const avg_acous = acoustic.reduce((sum, curr) => sum + curr, 0) / acoustic.length;\n      const avg_instr = instrum.reduce((sum, curr) => sum + curr, 0) / instrum.length;\n      const avg_liveness = liveness.reduce((sum, curr) => sum + curr, 0) / liveness.length;\n      const avg_val = valence.reduce((sum, curr) => sum + curr, 0) / valence.length;\n      const avg_tempo = tempo.reduce((sum, curr) => sum + curr, 0) / tempo.length;\n      const avg_duration = duration.reduce((sum, curr) => sum + curr, 0) / duration.length; ///const recomPromise = fetch()\n    }); //console.log(\"...................\");\n    //console.log(this.state.songData);\n  } // componentDidMount(){\n  // }\n\n\n  render() {\n    let ids = this.props.songID;\n    let token = this.props.token;\n    let artistID = this.props.artistID;\n    let genres = this.props.genres;\n    let ene = this.getSongData(ids, token);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Audio Feat \", genres]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CBased;","map":{"version":3,"sources":["/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js"],"names":["React","Component","CBased","getSongData","songIDS","accessToken","energy","key","loudness","acoustic","instrum","liveness","valence","tempo","duration","fetch","method","headers","then","response","json","data","audio_features","map","audio","i","push","Number","acousticness","instrumentalness","duration_ms","avg_energy","reduce","sum","curr","length","avg_key","avg_loud","avg_acous","avg_instr","avg_liveness","avg_val","avg_tempo","avg_duration","render","ids","props","songID","token","artistID","genres","ene"],"mappings":"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","sourcesContent":["import './CBased.css';\nimport React, {Component} from \"react\";\n\nclass CBased extends Component{\n\n  getSongData(songIDS,accessToken){\n    // Get audio analysis features from the user's songs\n    const energy = [];      //low level feature\n    const key = [];         //high level feature\n    const loudness = [];    //low level feature -- can be negative\n    const acoustic = [];    //low level feature (?)\n    const instrum = [];     //low level feature (?)\n    const liveness = [];    //low level feature (?)\n    const valence = [];     //low level feature (?)\n    const tempo = [];       //high level feature\n    const duration = [];    //song duration in ms!\n\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {'Authorization': 'Bearer ' + accessToken}\n    }).then(response => response.json())\n    //.then(data => console.log(data.audio_features));\n    .then(data => {\n      data.audio_features.map((audio, i) => {\n        energy.push(Number(audio.energy))\n        key.push(audio.key)\n        loudness.push(audio.loudness)\n        acoustic.push(audio.acousticness)\n        instrum.push(audio.instrumentalness)\n        liveness.push(audio.liveness)\n        valence.push(audio.valence)\n        tempo.push(audio.tempo)\n        duration.push(audio.duration_ms)\n      });\n      const avg_energy = energy.reduce((sum, curr) => sum + curr, 0)/energy.length ;\n      const avg_key = key.reduce((sum, curr) => sum + curr, 0)/key.length ;\n      const avg_loud = loudness.reduce((sum, curr) => sum + curr, 0)/loudness.length ;\n      const avg_acous = acoustic.reduce((sum, curr) => sum + curr, 0)/acoustic.length ;\n      const avg_instr = instrum.reduce((sum, curr) => sum + curr, 0)/instrum.length ;\n      const avg_liveness = liveness.reduce((sum, curr) => sum + curr, 0)/liveness.length ;\n      const avg_val = valence.reduce((sum, curr) => sum + curr, 0)/valence.length ;\n      const avg_tempo = tempo.reduce((sum, curr) => sum + curr, 0)/tempo.length ;\n      const avg_duration = duration.reduce((sum, curr) => sum + curr, 0)/duration.length ;\n\n      ///const recomPromise = fetch()\n\n    });\n    \n    //console.log(\"...................\");\n    //console.log(this.state.songData);\n\n  }\n\n\n\n  // componentDidMount(){\n\n  // }\n\n  render() {\n\t   \n    let ids = this.props.songID\n    let token = this.props.token\n    let artistID = this.props.artistID\n    let genres = this.props.genres\n    let ene = this.getSongData(ids,token)\n\n    return(\n      <div>Audio Feat {genres}</div>\n      \n    );\n\n\n  }\n    \n}\n\nexport default CBased;"]},"metadata":{},"sourceType":"module"}