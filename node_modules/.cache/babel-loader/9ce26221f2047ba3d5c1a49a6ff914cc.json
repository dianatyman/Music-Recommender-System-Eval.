{"ast":null,"code":"var _jsxFileName = \"/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js\";\nimport './CBased.css';\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CBased extends Component {\n  getSongData(songIDS, accessToken) {\n    // Get audio analysis features from the user's songs\n    const energy = []; //low level feature\n\n    const key = []; //high level feature\n\n    const loudness = []; //low level feature\n\n    const acoustic = []; //low level feature (?)\n\n    const instrum = []; //low level feature (?)\n\n    const liveness = []; //low level feature (?)\n\n    const valence = []; //low level feature (?)\n\n    const tempo = []; //high level feature\n\n    const duration = []; //song duration in ms!\n\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(response => response.json()) //.then(data => console.log(data.audio_features));\n    .then(data => {\n      data.audio_features.map(audio => {\n        energy.push(audio.energy);\n        key.push(audio.key);\n        loudness.push(audio.loudness);\n        acoustic.push(audio.acousticness);\n        instrum.push(audio.instrumentalness);\n        liveness.push(audio.liveness);\n        valence.push(audio.valence);\n        tempo.push(audio.tempo);\n        duration.push(audio.duration_ms);\n      });\n    });\n    const avg_energy = energy.reduce((sum, curr) => sum + Number(curr), 0) / energy.length;\n    console.log(energy(1)); //console.log(\"...................\");\n    //console.log(this.state.songData);\n  } // componentDidMount(){\n  // }\n\n\n  render() {\n    let ids = this.props.songID;\n    let token = this.props.token;\n    this.getSongData(ids, token);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Audio Feat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CBased;","map":{"version":3,"sources":["/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js"],"names":["React","Component","CBased","getSongData","songIDS","accessToken","energy","key","loudness","acoustic","instrum","liveness","valence","tempo","duration","fetch","method","headers","then","response","json","data","audio_features","map","audio","push","acousticness","instrumentalness","duration_ms","avg_energy","reduce","sum","curr","Number","length","console","log","render","ids","props","songID","token"],"mappings":";AAAA,OAAO,cAAP;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;AAEA,MAAMC,MAAN,SAAqBD,SAArB,CAA8B;AAE5BE,EAAAA,WAAW,CAACC,OAAD,EAASC,WAAT,EAAqB;AAC9B;AACA,UAAMC,MAAM,GAAG,EAAf,CAF8B,CAEN;;AACxB,UAAMC,GAAG,GAAG,EAAZ,CAH8B,CAGN;;AACxB,UAAMC,QAAQ,GAAG,EAAjB,CAJ8B,CAIN;;AACxB,UAAMC,QAAQ,GAAG,EAAjB,CAL8B,CAKN;;AACxB,UAAMC,OAAO,GAAG,EAAhB,CAN8B,CAMN;;AACxB,UAAMC,QAAQ,GAAG,EAAjB,CAP8B,CAON;;AACxB,UAAMC,OAAO,GAAG,EAAhB,CAR8B,CAQN;;AACxB,UAAMC,KAAK,GAAG,EAAd,CAT8B,CASN;;AACxB,UAAMC,QAAQ,GAAG,EAAjB,CAV8B,CAUN;;AAExBC,IAAAA,KAAK,CAAC,mDAAmDX,OAApD,EAA6D;AAChEY,MAAAA,MAAM,EAAE,KADwD;AAEhEC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,YAAYZ;AAA9B;AAFuD,KAA7D,CAAL,CAGGa,IAHH,CAGQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHpB,EAIA;AAJA,KAKCF,IALD,CAKMG,IAAI,IAAI;AACZA,MAAAA,IAAI,CAACC,cAAL,CAAoBC,GAApB,CAAwBC,KAAK,IAAI;AAC/BlB,QAAAA,MAAM,CAACmB,IAAP,CAAYD,KAAK,CAAClB,MAAlB;AACAC,QAAAA,GAAG,CAACkB,IAAJ,CAASD,KAAK,CAACjB,GAAf;AACAC,QAAAA,QAAQ,CAACiB,IAAT,CAAcD,KAAK,CAAChB,QAApB;AACAC,QAAAA,QAAQ,CAACgB,IAAT,CAAcD,KAAK,CAACE,YAApB;AACAhB,QAAAA,OAAO,CAACe,IAAR,CAAaD,KAAK,CAACG,gBAAnB;AACAhB,QAAAA,QAAQ,CAACc,IAAT,CAAcD,KAAK,CAACb,QAApB;AACAC,QAAAA,OAAO,CAACa,IAAR,CAAaD,KAAK,CAACZ,OAAnB;AACAC,QAAAA,KAAK,CAACY,IAAN,CAAWD,KAAK,CAACX,KAAjB;AACAC,QAAAA,QAAQ,CAACW,IAAT,CAAcD,KAAK,CAACI,WAApB;AACD,OAVD;AAWD,KAjBD;AAkBA,UAAMC,UAAU,GAAIvB,MAAM,CAACwB,MAAP,CAAc,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGE,MAAM,CAACD,IAAD,CAAzC,EAAiD,CAAjD,IAAsD1B,MAAM,CAAC4B,MAAjF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY9B,MAAM,CAAC,CAAD,CAAlB,EA/B8B,CAgC9B;AACA;AAED,GArC2B,CAyC5B;AAEA;;;AAEA+B,EAAAA,MAAM,GAAG;AAEP,QAAIC,GAAG,GAAG,KAAKC,KAAL,CAAWC,MAArB;AACA,QAAIC,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;AACA,SAAKtC,WAAL,CAAiBmC,GAAjB,EAAqBG,KAArB;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAzD2B;;AA6D9B,eAAevC,MAAf","sourcesContent":["import './CBased.css';\nimport React, {Component} from \"react\";\n\nclass CBased extends Component{\n\n  getSongData(songIDS,accessToken){\n    // Get audio analysis features from the user's songs\n    const energy = [];      //low level feature\n    const key = [];         //high level feature\n    const loudness = [];    //low level feature\n    const acoustic = [];    //low level feature (?)\n    const instrum = [];     //low level feature (?)\n    const liveness = [];    //low level feature (?)\n    const valence = [];     //low level feature (?)\n    const tempo = [];       //high level feature\n    const duration = [];    //song duration in ms!\n\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {'Authorization': 'Bearer ' + accessToken}\n    }).then(response => response.json())\n    //.then(data => console.log(data.audio_features));\n    .then(data => {\n      data.audio_features.map(audio => {\n        energy.push(audio.energy)\n        key.push(audio.key)\n        loudness.push(audio.loudness)\n        acoustic.push(audio.acousticness)\n        instrum.push(audio.instrumentalness)\n        liveness.push(audio.liveness)\n        valence.push(audio.valence)\n        tempo.push(audio.tempo)\n        duration.push(audio.duration_ms)\n      })\n    });\n    const avg_energy = (energy.reduce((sum, curr) => sum + Number(curr), 0) / energy.length);\n    console.log(energy(1));\n    //console.log(\"...................\");\n    //console.log(this.state.songData);\n\n  }\n\n\n\n  // componentDidMount(){\n\n  // }\n\n  render() {\n\t   \n    let ids = this.props.songID\n    let token = this.props.token\n    this.getSongData(ids,token)\n\n    return(\n      <div>Audio Feat</div>\n      \n    );\n\n\n  }\n    \n}\n\nexport default CBased;"]},"metadata":{},"sourceType":"module"}