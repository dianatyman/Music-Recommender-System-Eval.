{"ast":null,"code":"var _jsxFileName = \"/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js\";\nimport './CBased.css';\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CBased extends Component {\n  getSongData(songIDS, accessToken, genres, artistID) {\n    // Get audio analysis features from the user's songs\n    const energy = []; //low level feature\n\n    const key = []; //high level feature\n\n    const loudness = []; //low level feature -- can be negative\n\n    const acoustic = []; //low level feature (?)\n\n    const instrum = []; //low level feature (?)\n\n    const liveness = []; //low level feature (?)\n\n    const valence = []; //low level feature (?)\n\n    const tempo = []; //high level feature\n\n    const duration = []; //song duration in ms!\n\n    fetch('https://api.spotify.com/v1/audio-features?ids=748mdHapucXQri7IAO8yFK%3lIxtCaROdRDuTnNBDm3n2'\n    /* + songIDS*/\n    , {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(response => response.json()) //.then(data => console.log(data.audio_features));\n    .then(data => {\n      if (!data.audio_features) {\n        return;\n      } else {\n        data.audio_features.map((audio, i) => {\n          if (!audio) {\n            return;\n          }\n\n          energy.push(Number(audio.energy));\n          key.push(audio.key);\n          loudness.push(audio.loudness);\n          acoustic.push(audio.acousticness);\n          instrum.push(audio.instrumentalness);\n          liveness.push(audio.liveness);\n          valence.push(audio.valence);\n          tempo.push(audio.tempo);\n          duration.push(audio.duration_ms);\n        });\n        const avg_energy = energy.reduce((sum, curr) => sum + curr, 0) / energy.length; //done\n\n        const avg_key = key.reduce((sum, curr) => sum + curr, 0) / key.length; //done\n\n        const avg_loud = loudness.reduce((sum, curr) => sum + curr, 0) / loudness.length; //done\n\n        const avg_acous = acoustic.reduce((sum, curr) => sum + curr, 0) / acoustic.length; //done  \n\n        const avg_instr = instrum.reduce((sum, curr) => sum + curr, 0) / instrum.length; //done\n\n        const avg_liveness = liveness.reduce((sum, curr) => sum + curr, 0) / liveness.length; //done\n\n        const avg_val = valence.reduce((sum, curr) => sum + curr, 0) / valence.length;\n        const avg_tempo = tempo.reduce((sum, curr) => sum + curr, 0) / tempo.length;\n        const avg_duration = duration.reduce((sum, curr) => sum + curr, 0) / duration.length; //done\n        // Get the most popular genre of the user\n\n        const words = genres.split(',');\n        const wordCounts = {};\n\n        for (var i = 0; i < words.length; i++) wordCounts[words[i]] = (wordCounts[words[i]] || 0) + 1;\n\n        const getMax = object => {\n          return Object.keys(object).filter(x => {\n            return object[x] == Math.max.apply(null, Object.values(object));\n          });\n        };\n\n        const userGenre = getMax(wordCounts).toString();\n        const song_seed = songIDS.split(','); //get user's top song for recommendation seed\n        // Get 20 recommendations of content based for the user\n\n        const promise_recom = fetch(\"https://api.spotify.com/v1/recommendations?limit=20&market=ES&seed_artists=\" + artistID + \"&seed_genres=\" + userGenre + \"&seed_tracks=\" + song_seed[0]\n        /*+ \"&target_acousticness=\" + avg_acous + \"&target_duration_ms=\" + avg_duration + \n        \"&target_energy=\" + avg_energy + \"&target_instrumentalness=\" + avg_instr + \"&target_key=\" + avg_key + \"&target_liveness=\" + avg_liveness +\n        \"&target_loudness=\" + avg_loud + \"&target_tempo=\" + avg_tempo + \"&target_valence=\" + avg_val*/\n        , {\n          method: 'GET',\n          headers: {\n            'Authorization': 'Bearer ' + accessToken\n          }\n        }).then(response => response.json()).then(data => console.log(data));\n      }\n    }); //console.log(\"...................\");\n    //console.log(this.state.songData);\n  } // componentDidMount(){\n  // }\n\n\n  render() {\n    let ids = this.props.songID.replaceAll(',', '%'); //console.log(ids.replaceAll(',', '%'))\n\n    let token = this.props.token;\n    let artistID = this.props.artistID.replaceAll(',', '%');\n    let genres = this.props.genres;\n\n    if (token) {\n      let ene = this.getSongData(ids, token, genres, artistID);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Audio Feat \", artistID]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CBased;","map":{"version":3,"sources":["/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js"],"names":["React","Component","CBased","getSongData","songIDS","accessToken","genres","artistID","energy","key","loudness","acoustic","instrum","liveness","valence","tempo","duration","fetch","method","headers","then","response","json","data","audio_features","map","audio","i","push","Number","acousticness","instrumentalness","duration_ms","avg_energy","reduce","sum","curr","length","avg_key","avg_loud","avg_acous","avg_instr","avg_liveness","avg_val","avg_tempo","avg_duration","words","split","wordCounts","getMax","object","Object","keys","filter","x","Math","max","apply","values","userGenre","toString","song_seed","promise_recom","console","log","render","ids","props","songID","replaceAll","token","ene"],"mappings":"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","sourcesContent":["import './CBased.css';\nimport React, {Component} from \"react\";\n\nclass CBased extends Component{\n\n  getSongData(songIDS,accessToken,genres,artistID){\n    // Get audio analysis features from the user's songs\n    const energy = [];      //low level feature\n    const key = [];         //high level feature\n    const loudness = [];    //low level feature -- can be negative\n    const acoustic = [];    //low level feature (?)\n    const instrum = [];     //low level feature (?)\n    const liveness = [];    //low level feature (?)\n    const valence = [];     //low level feature (?)\n    const tempo = [];       //high level feature\n    const duration = [];    //song duration in ms!\n\n    fetch('https://api.spotify.com/v1/audio-features?ids=748mdHapucXQri7IAO8yFK%3lIxtCaROdRDuTnNBDm3n2'/* + songIDS*/, {\n      method: 'GET',\n      headers: {'Accept': 'application/json', 'Content-Type': 'application/json' , 'Authorization': 'Bearer ' + accessToken,}\n    }).then(response => response.json())\n    //.then(data => console.log(data.audio_features));\n    .then(data => {\n      if(!data.audio_features){\n          return;\n        }else{\n          data.audio_features.map((audio, i) => {\n            if(!audio){\n              return;\n            }\n            energy.push(Number(audio.energy))\n            key.push(audio.key)\n            loudness.push(audio.loudness)\n            acoustic.push(audio.acousticness)\n            instrum.push(audio.instrumentalness)\n            liveness.push(audio.liveness)\n            valence.push(audio.valence)\n            tempo.push(audio.tempo)\n            duration.push(audio.duration_ms)\n          });\n          const avg_energy = energy.reduce((sum, curr) => sum + curr, 0)/energy.length ;            //done\n          const avg_key = key.reduce((sum, curr) => sum + curr, 0)/key.length ;                     //done\n          const avg_loud = loudness.reduce((sum, curr) => sum + curr, 0)/loudness.length ;          //done\n          const avg_acous = acoustic.reduce((sum, curr) => sum + curr, 0)/acoustic.length ;         //done  \n          const avg_instr = instrum.reduce((sum, curr) => sum + curr, 0)/instrum.length ;           //done\n          const avg_liveness = liveness.reduce((sum, curr) => sum + curr, 0)/liveness.length ;      //done\n          const avg_val = valence.reduce((sum, curr) => sum + curr, 0)/valence.length ;\n          const avg_tempo = tempo.reduce((sum, curr) => sum + curr, 0)/tempo.length ;\n          const avg_duration = duration.reduce((sum, curr) => sum + curr, 0)/duration.length ;      //done\n\n          // Get the most popular genre of the user\n          const words = genres.split(',');\n          const wordCounts = { };\n\n          for(var i = 0; i < words.length; i++)\n            wordCounts[words[i]] = (wordCounts[words[i]] || 0) + 1;\n\n          const getMax = object => {\n            return Object.keys(object).filter(x => {\n                 return object[x] == Math.max.apply(null, \n                 Object.values(object));\n            });\n          };\n\n          const userGenre = getMax(wordCounts).toString();\n          const song_seed = songIDS.split(','); //get user's top song for recommendation seed\n\n          // Get 20 recommendations of content based for the user\n          const promise_recom = fetch(\"https://api.spotify.com/v1/recommendations?limit=20&market=ES&seed_artists=\" + artistID + \"&seed_genres=\" + userGenre +\n                    \"&seed_tracks=\" + song_seed[0] /*+ \"&target_acousticness=\" + avg_acous + \"&target_duration_ms=\" + avg_duration + \n                    \"&target_energy=\" + avg_energy + \"&target_instrumentalness=\" + avg_instr + \"&target_key=\" + avg_key + \"&target_liveness=\" + avg_liveness +\n                    \"&target_loudness=\" + avg_loud + \"&target_tempo=\" + avg_tempo + \"&target_valence=\" + avg_val*/, {\n              method: 'GET',\n              headers: {'Authorization': 'Bearer ' + accessToken}\n          }).then(response => response.json())\n          .then(data => console.log(data));\n\n        }\n\n    });\n    \n    //console.log(\"...................\");\n    //console.log(this.state.songData);\n\n  }\n\n\n\n\n  // componentDidMount(){\n\n  // }\n\n  render() {\n\t   \n    let ids = this.props.songID.replaceAll(',', '%')\n    //console.log(ids.replaceAll(',', '%'))\n    let token = this.props.token\n    let artistID = this.props.artistID.replaceAll(',', '%')\n    let genres = this.props.genres\n    if(token){\n      let ene = this.getSongData(ids,token,genres,artistID)\n    }\n    \n\n    return(\n      <div>Audio Feat {artistID}</div>\n      \n    );\n\n\n  }\n    \n}\n\nexport default CBased;"]},"metadata":{},"sourceType":"module"}