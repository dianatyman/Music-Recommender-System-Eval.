{"ast":null,"code":"var _jsxFileName = \"/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js\";\nimport './CBased.css';\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CBased extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userName: '',\n      token: '',\n      songName: [],\n      songID: [],\n      data: [],\n      limit: 10\n    };\n  }\n\n  getData(accessToken) {\n    fetch('https://api.spotify.com/v1/me/top/tracks?limit=' + this.state.limit, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + accessToken,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => this.setState(state => {\n      //data.items.map(i => state.userData.push(!i.name))\n      //console.log(data);\n      let temp = data.items;\n      temp.map(function (i) {\n        if (!state.songName.includes(i.name) && !state.songID.includes(i.id)) {\n          state.songName.push(i.name);\n          state.songID.push(i.id);\n        }\n\n        return state.songName && state.songID;\n      });\n    })); // Check if it retreives song name and id correctly\n    //console.log(this.state.songName);\n    //console.log(this.state.songID);\n  }\n\n  getUserData(accessToken) {\n    // Fetch User's profile information\n    fetch('https://api.spotify.com/v1/me', {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(response => response.json()).then(data => this.setState({\n      userName: data.display_name\n    }));\n  } // getSongData(songIDS){\n  //   // Get audio analysis features from the user's songs\n  //   fetch('https://api.spotify.com/v1/audio-features?ids=' + , {\n  //     method: 'GET',\n  //     headers: {'Authorization': 'Bearer ' + accessToken}\n  //   }).then(response => response.json())\n  //   .then(data => this.setState({\n  //     userName: data.display_name\n  //   }));\n  // }\n\n\n  componentDidMount() {\n    const url = new URL(window.location.href);\n    const accessToken = url.searchParams.get('access_token'); //console.log(accessToken);\n\n    this.setState({\n      token: accessToken\n    });\n    console.log(accessToken);\n\n    if (accessToken) {\n      this.getUserData(this.state.token);\n      this.getData(this.state.token);\n    }\n\n    ; // this.getSongData(this.state.songID);\n  }\n\n  render() {\n    //console.log(Object.keys(this.state.songName).map(key => (this.state.songName[key])));\n    //console.log(this.state.songName[1]);\n    if (!this.state.token) {\n      console.log(\"LALALALLAALL\");\n      return 'la';\n    }\n\n    ; // This will render once all the specific results have been fetched\n\n    if (this.state.token) {\n      console.log(\"hey\");\n      return this.state.songName.map((song, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"song: \", song]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this);\n      });\n    }\n\n    ; // return(\n    // \t\t<div className=\"CB\">\n    //  \t\t\t<h1 style={{'fontSize': '35px','marginTop': '5px' }}>Content Based Reccommendation!</h1>\n    //  \t\t\t<h1 style={{'fontSize': '15px','marginTop': '5px' }}>User top songs:  \n    //          <div>\n    //            {this.state.songName.map((song, i) => {\n    //              return (\n    //                <div key={i}>\n    //                  1st API call data:\n    //                  { song }\n    //                </div>\n    //              );\n    //            })}\n    //          </div>\n    //        </h1>\n    //  \t</div>\n    // \t);\n  }\n\n}\n\nexport default CBased;","map":{"version":3,"sources":["/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js"],"names":["React","Component","CBased","constructor","state","userName","token","songName","songID","data","limit","getData","accessToken","fetch","method","headers","then","response","json","setState","temp","items","map","i","includes","name","id","push","getUserData","display_name","componentDidMount","url","URL","window","location","href","searchParams","get","console","log","render","song"],"mappings":"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","sourcesContent":["import './CBased.css';\nimport React, {Component} from \"react\";\n\nclass CBased extends Component{\n\n\tconstructor() {\n    super();\n    this.state = {\n      userName:'',\n      token:'',\n      songName:[],\n      songID:[],\n      data: [],\n      limit:10\n    }\n  }\n\n  getData (accessToken) {\n    fetch('https://api.spotify.com/v1/me/top/tracks?limit=' + this.state.limit, {\n      method: 'GET',\n      headers: {'Authorization': 'Bearer ' + accessToken,\n                'Content-Type': 'application/json',}\n    }).then(response => response.json())\n    .then(data => this.setState(state => {\n      //data.items.map(i => state.userData.push(!i.name))\n      //console.log(data);\n      let temp = data.items;\n      temp.map(function(i){\n        if (!state.songName.includes(i.name) && !state.songID.includes(i.id)){\n          state.songName.push(i.name);\n          state.songID.push(i.id);\n        }\n        \n        return state.songName && state.songID;\n      })\n    }));\n\n    // Check if it retreives song name and id correctly\n    //console.log(this.state.songName);\n    //console.log(this.state.songID);\n  }\n\n  getUserData(accessToken){\n  \t// Fetch User's profile information\n    fetch('https://api.spotify.com/v1/me', {\n      method: 'GET',\n      headers: {'Authorization': 'Bearer ' + accessToken}\n    }).then(response => response.json())\n    .then(data => this.setState({\n      userName: data.display_name\n    }));\n  }\n\n  // getSongData(songIDS){\n  //   // Get audio analysis features from the user's songs\n  //   fetch('https://api.spotify.com/v1/audio-features?ids=' + , {\n  //     method: 'GET',\n  //     headers: {'Authorization': 'Bearer ' + accessToken}\n  //   }).then(response => response.json())\n  //   .then(data => this.setState({\n  //     userName: data.display_name\n  //   }));\n\n  // }\n\n  componentDidMount() {\n    const url = new URL(window.location.href);\n    const accessToken = url.searchParams.get('access_token');\n\t  //console.log(accessToken);\n\t  this.setState({\n        \ttoken: accessToken\n    });\n\n    console.log(accessToken);\n\n    if(accessToken){\n    \tthis.getUserData(this.state.token);\n      this.getData(this.state.token);\n    };\n\n    // this.getSongData(this.state.songID);\n  }\n\n\trender() {\n\t\t//console.log(Object.keys(this.state.songName).map(key => (this.state.songName[key])));\n    //console.log(this.state.songName[1]);\n    if(!this.state.token){\n      console.log(\"LALALALLAALL\");\n      return 'la';\n    };\n\n\n    // This will render once all the specific results have been fetched\n    if(this.state.token){\n      console.log(\"hey\");\n      return this.state.songName.map((song, i) => {\n        return (\n            <div key={i}>\n                    song: {song}\n            </div>\n        );\n      });\n    };\n    \n\n    \t// return(\n     // \t\t<div className=\"CB\">\n     //  \t\t\t<h1 style={{'fontSize': '35px','marginTop': '5px' }}>Content Based Reccommendation!</h1>\n     //  \t\t\t<h1 style={{'fontSize': '15px','marginTop': '5px' }}>User top songs:  \n     //          <div>\n     //            {this.state.songName.map((song, i) => {\n     //              return (\n     //                <div key={i}>\n     //                  1st API call data:\n     //                  { song }\n     //                </div>\n     //              );\n     //            })}\n     //          </div>\n     //        </h1>\n     //  \t</div>\n      \t\t\n     // \t);\n   }\n    \n}\n\nexport default CBased;"]},"metadata":{},"sourceType":"module"}