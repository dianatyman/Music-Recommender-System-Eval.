{"ast":null,"code":"var _jsxFileName = \"/Users/dianatyman/Desktop/music-recom-eval/src/CFiltering/CollabFiltering.js\";\nimport './CollabFiltering.css';\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CollabFiltering extends Component {\n  constructor() {\n    super();\n    this.state = {\n      song_name: [],\n      album_img: [],\n      audio: [],\n      artist: []\n    };\n  }\n\n  componentDidMount() {\n    let userName = this.props.userName;\n    let token = this.props.token;\n    const playID_Disc = [];\n    const playID_collab = [];\n    fetch(\"https://api.spotify.com/v1/users/\" + userName + \"/playlists?limit=50\", {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    }).then(response => response.json()).then(data => {\n      data.items.map(playlist => {\n        if (playlist.name == \"Descubrimiento semanal\" || playlist.name == \"Discover Weekly\") {\n          playID_Disc.push(playlist.id);\n        }\n\n        if (playlist.collaborative) {\n          playID_collab.push(playlist.id);\n        }\n      }); // Get Discover Weekly Collab Filtering Recomm's\n\n      if (playID_Disc.length > 0) {\n        playID_Disc.map(playlist => {\n          fetch(\"https://api.spotify.com/v1/playlists/\" + playlist + \"/tracks?market=ES&limit=20\", {\n            method: 'GET',\n            headers: {\n              'Authorization': 'Bearer ' + token\n            }\n          }).then(response => response.json()).then(data => {\n            data.items.track.map(dts => {\n              this.setState({\n                song_name: dts.name,\n                album_img: dts.album.images[2].url,\n                audio: dts.preview_url,\n                artist: dts.artists[0].name\n              });\n            });\n          });\n        });\n      } else if (playID_collab.length > 0) {\n        const songIDS = [];\n        playID_collab.map(playlist => {\n          fetch(\"https://api.spotify.com/v1/playlists/\" + playlist + \"/tracks?market=ES&limit=20\", {\n            method: 'GET',\n            headers: {\n              'Authorization': 'Bearer ' + token\n            }\n          }).then(response => response.json()).then(data => {\n            data.items.track.map(dts => {\n              songIDS.push(dts.id);\n            });\n            fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS.toString(), {\n              method: 'GET',\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + accessToken\n              }\n            }).then(response => response.json()) //.then(data => console.log(data.audio_features));\n            .then(data => {\n              // if(!data.audio_features){\n              //     return;\n              //   }else{\n              //console.log(data.audio_features)\n              data.audio_features.map((audio, i) => {\n                // if(!audio){\n                //   return;\n                // }\n                energy.push(Number(audio.energy));\n                key.push(audio.key);\n                loudness.push(audio.loudness);\n                acoustic.push(audio.acousticness);\n                instrum.push(audio.instrumentalness);\n                liveness.push(audio.liveness);\n                valence.push(audio.valence);\n                tempo.push(audio.tempo);\n                duration.push(audio.duration_ms);\n              });\n              const avg_energy = (energy.reduce((sum, curr) => sum + curr, 0) / energy.length).toFixed(3);\n              const avg_key = (key.reduce((sum, curr) => sum + curr, 0) / key.length).toFixed();\n              const avg_loud = (loudness.reduce((sum, curr) => sum + curr, 0) / loudness.length).toFixed(3);\n              const avg_acous = (acoustic.reduce((sum, curr) => sum + curr, 0) / acoustic.length).toFixed(3);\n              const avg_instr = (instrum.reduce((sum, curr) => sum + curr, 0) / instrum.length).toFixed(3);\n              const avg_liveness = (liveness.reduce((sum, curr) => sum + curr, 0) / liveness.length).toFixed(3);\n              const avg_val = (valence.reduce((sum, curr) => sum + curr, 0) / valence.length).toFixed(3);\n              const avg_tempo = (tempo.reduce((sum, curr) => sum + curr, 0) / tempo.length).toFixed(3);\n              const avg_duration = (duration.reduce((sum, curr) => sum + curr, 0) / duration.length).toFixed(); // Get the most popular genre of the user\n\n              const words = genres.split(',');\n              const wordCounts = {};\n\n              for (var i = 0; i < words.length; i++) wordCounts[words[i]] = (wordCounts[words[i]] || 0) + 1;\n\n              const getMax = object => {\n                return Object.keys(object).filter(x => {\n                  return object[x] == Math.max.apply(null, Object.values(object));\n                });\n              };\n\n              const userGenre = getMax(wordCounts).toString();\n              const song_seed = songIDS.split(','); //get user's top song for recommendation seed\n\n              console.log(artistID); // Get 20 recommendations of content based for the user\n\n              fetch(\"https://api.spotify.com/v1/recommendations?limit=20&market=ES&seed_artists=\" + artistID + \"&seed_genres=\" + userGenre + \"&seed_tracks=\" + song_seed[0] + \"&target_acousticness=\" + avg_acous + \"&target_duration_ms=\" + avg_duration + \"&target_energy=\" + avg_energy + \"&target_instrumentalness=\" + avg_instr + \"&target_key=\" + avg_key + \"&target_liveness=\" + avg_liveness + \"&target_loudness=\" + avg_loud + \"&target_tempo=\" + avg_tempo + \"&target_valence=\" + avg_val, {\n                method: 'GET',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json',\n                  'Authorization': 'Bearer ' + accessToken\n                }\n              }).then(response => response.json()) //.then(data => console.log(data))\n              .then(data => {\n                if (!data) {\n                  return;\n                } else {\n                  console.log(data);\n                  data.tracks.map(song => {\n                    recom_songs.push(song.name); // song name\n\n                    recom_songs_audio.push(song.preview_url); // audio sample of song\n\n                    recom_songs_img.push(song.album.images[2].url); // small album image\n\n                    artistName.push(song.artists[0].name);\n                  });\n                  this.setState({\n                    songs: recom_songs,\n                    songs_img: recom_songs_img,\n                    songs_audio: recom_songs_audio,\n                    artName: artistName\n                  });\n                }\n              }); //console.log([recom_songs, recom_songs_audio, recom_songs_img]);\n            });\n          });\n        });\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CF\",\n      children: Object.keys(this.state.song_name).map(index => {\n        return /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: this.state.audio[index],\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.album_img[index],\n              style: {\n                width: '60px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this), \" \", this.state.song_name[index] + \" - \" + this.state.artist[index], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 145\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this);\n  }\n\n} //const CB = new CollabFiltering();\n\n\nexport default CollabFiltering; //export default CB;","map":{"version":3,"sources":["/Users/dianatyman/Desktop/music-recom-eval/src/CFiltering/CollabFiltering.js"],"names":["React","Component","CollabFiltering","constructor","state","song_name","album_img","audio","artist","componentDidMount","userName","props","token","playID_Disc","playID_collab","fetch","method","headers","then","response","json","data","items","map","playlist","name","push","id","collaborative","length","track","dts","setState","album","images","url","preview_url","artists","songIDS","toString","accessToken","audio_features","i","energy","Number","key","loudness","acoustic","acousticness","instrum","instrumentalness","liveness","valence","tempo","duration","duration_ms","avg_energy","reduce","sum","curr","toFixed","avg_key","avg_loud","avg_acous","avg_instr","avg_liveness","avg_val","avg_tempo","avg_duration","words","genres","split","wordCounts","getMax","object","Object","keys","filter","x","Math","max","apply","values","userGenre","song_seed","console","log","artistID","tracks","song","recom_songs","recom_songs_audio","recom_songs_img","artistName","songs","songs_img","songs_audio","artName","render","index","width"],"mappings":"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","sourcesContent":["import './CollabFiltering.css';\nimport React, {Component} from \"react\";\n\nclass CollabFiltering extends Component{\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tsong_name:[],\n\t\t\talbum_img:[],\n\t\t\taudio:[],\n\t\t\tartist:[]\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tlet userName = this.props.userName\n\t\tlet token = this.props.token\n\n\t\tconst playID_Disc = []\n\t\tconst playID_collab = []\n\n\t\tfetch(\"https://api.spotify.com/v1/users/\" + userName + \"/playlists?limit=50\", {\n\t\t      \tmethod: 'GET',\n\t\t      \theaders: {'Authorization': 'Bearer ' + token}\n\t\t    }).then(response => response.json())\n\t\t    .then(data => {\n\t\t    \tdata.items.map(playlist => {\n\t\t    \t\tif(playlist.name == \"Descubrimiento semanal\" || playlist.name == \"Discover Weekly\"){\n\t\t    \t\t\tplayID_Disc.push(playlist.id)\n\t\t    \t\t}\n\n\t\t    \t\tif(playlist.collaborative){\n\t\t    \t\t\tplayID_collab.push(playlist.id)\n\t\t    \t\t}\n\t\t    \t\t\n\t\t    \t});\n\n\t\t    \t// Get Discover Weekly Collab Filtering Recomm's\n\t\t    \tif(playID_Disc.length > 0){\n\t\t    \t\tplayID_Disc.map(playlist => {\n\t\t    \t\t\tfetch(\"https://api.spotify.com/v1/playlists/\" + playlist + \"/tracks?market=ES&limit=20\", {\n\t\t    \t\t\t\tmethod: 'GET',\n\t\t      \t\t\t\theaders: {'Authorization': 'Bearer ' + token}\n\t\t    \t\t\t}).then(response => response.json())\n\t\t    \t\t\t.then(data => {\n\t\t    \t\t\t\tdata.items.track.map(dts =>{\n\t\t    \t\t\t\t\tthis.setState({\n\t\t    \t\t\t\t\t\tsong_name: dts.name,\n\t\t    \t\t\t\t\t\talbum_img: dts.album.images[2].url,\n\t\t    \t\t\t\t\t\taudio: dts.preview_url,\n\t\t    \t\t\t\t\t\tartist: dts.artists[0].name\n\t\t    \t\t\t\t\t})\n\t\t    \t\t\t\t})\n\t\t    \t\t\t})\n\t\t    \t\t})\n\t\t    \t}else if(playID_collab.length > 0){\n\t\t    \t\tconst songIDS = []\n\t\t    \t\tplayID_collab.map(playlist => {\n\t\t    \t\t\tfetch(\"https://api.spotify.com/v1/playlists/\" + playlist + \"/tracks?market=ES&limit=20\", {\n\t\t    \t\t\t\tmethod: 'GET',\n\t\t      \t\t\t\theaders: {'Authorization': 'Bearer ' + token}\n\t\t    \t\t\t}).then(response => response.json())\n\t\t    \t\t\t.then(data => {\n\t\t    \t\t\t\tdata.items.track.map(dts =>{\n\t\t    \t\t\t\t\tsongIDS.push(dts.id)\n\t\t    \t\t\t\t})\n\n\t\t    \t\t\t\tfetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS.toString(), {\n\t\t\t\t\t\t\t      method: 'GET',\n\t\t\t\t\t\t\t      headers: {'Accept': 'application/json', 'Content-Type': 'application/json' , 'Authorization': 'Bearer ' + accessToken}\n\t\t\t\t\t\t\t    }).then(response => response.json())\n\t\t\t\t\t\t\t    //.then(data => console.log(data.audio_features));\n\t\t\t\t\t\t\t    .then(data => {\n\t\t\t\t\t\t\t      // if(!data.audio_features){\n\t\t\t\t\t\t\t      //     return;\n\t\t\t\t\t\t\t      //   }else{\n\t\t\t\t\t\t\t          //console.log(data.audio_features)\n\t\t\t\t\t\t\t          data.audio_features.map((audio, i) => {\n\t\t\t\t\t\t\t            // if(!audio){\n\t\t\t\t\t\t\t            //   return;\n\t\t\t\t\t\t\t            // }\n\t\t\t\t\t\t\t            energy.push(Number(audio.energy))\n\t\t\t\t\t\t\t            key.push(audio.key)\n\t\t\t\t\t\t\t            loudness.push(audio.loudness)\n\t\t\t\t\t\t\t            acoustic.push(audio.acousticness)\n\t\t\t\t\t\t\t            instrum.push(audio.instrumentalness)\n\t\t\t\t\t\t\t            liveness.push(audio.liveness)\n\t\t\t\t\t\t\t            valence.push(audio.valence)\n\t\t\t\t\t\t\t            tempo.push(audio.tempo)\n\t\t\t\t\t\t\t            duration.push(audio.duration_ms)\n\t\t\t\t\t\t\t          });\n\t\t\t\t\t\t\t          const avg_energy = (energy.reduce((sum, curr) => sum + curr, 0)/energy.length).toFixed(3) ;            \n\t\t\t\t\t\t\t          const avg_key = (key.reduce((sum, curr) => sum + curr, 0)/key.length).toFixed() ;                     \n\t\t\t\t\t\t\t          const avg_loud = (loudness.reduce((sum, curr) => sum + curr, 0)/loudness.length).toFixed(3) ;          \n\t\t\t\t\t\t\t          const avg_acous = (acoustic.reduce((sum, curr) => sum + curr, 0)/acoustic.length).toFixed(3) ;           \n\t\t\t\t\t\t\t          const avg_instr = (instrum.reduce((sum, curr) => sum + curr, 0)/instrum.length).toFixed(3) ;           \n\t\t\t\t\t\t\t          const avg_liveness = (liveness.reduce((sum, curr) => sum + curr, 0)/liveness.length).toFixed(3) ;      \n\t\t\t\t\t\t\t          const avg_val = (valence.reduce((sum, curr) => sum + curr, 0)/valence.length).toFixed(3) ;\n\t\t\t\t\t\t\t          const avg_tempo = (tempo.reduce((sum, curr) => sum + curr, 0)/tempo.length).toFixed(3) ;\n\t\t\t\t\t\t\t          const avg_duration = (duration.reduce((sum, curr) => sum + curr, 0)/duration.length).toFixed() ;      \n\n\t\t\t\t\t\t\t          // Get the most popular genre of the user\n\t\t\t\t\t\t\t          const words = genres.split(',');\n\t\t\t\t\t\t\t          const wordCounts = { };\n\n\t\t\t\t\t\t\t          for(var i = 0; i < words.length; i++)\n\t\t\t\t\t\t\t            wordCounts[words[i]] = (wordCounts[words[i]] || 0) + 1;\n\n\t\t\t\t\t\t\t          const getMax = object => {\n\t\t\t\t\t\t\t            return Object.keys(object).filter(x => {\n\t\t\t\t\t\t\t                 return object[x] == Math.max.apply(null, \n\t\t\t\t\t\t\t                 Object.values(object));\n\t\t\t\t\t\t\t            });\n\t\t\t\t\t\t\t          };\n\n\t\t\t\t\t\t\t          const userGenre = getMax(wordCounts).toString();\n\t\t\t\t\t\t\t          const song_seed = songIDS.split(','); //get user's top song for recommendation seed\n\t\t\t\t\t\t\t          console.log(artistID)\n\t\t\t\t\t\t\t          // Get 20 recommendations of content based for the user\n\t\t\t\t\t\t\t          fetch(\"https://api.spotify.com/v1/recommendations?limit=20&market=ES&seed_artists=\" + artistID + \"&seed_genres=\" + userGenre +\n\t\t\t\t\t\t\t                    \"&seed_tracks=\" + song_seed[0] + \"&target_acousticness=\" + avg_acous + \"&target_duration_ms=\" + avg_duration + \n\t\t\t\t\t\t\t                    \"&target_energy=\" + avg_energy + \"&target_instrumentalness=\" + avg_instr + \"&target_key=\" + avg_key + \"&target_liveness=\" + avg_liveness +\n\t\t\t\t\t\t\t                    \"&target_loudness=\" + avg_loud + \"&target_tempo=\" + avg_tempo + \"&target_valence=\" + avg_val, {\n\t\t\t\t\t\t\t              method: 'GET',\n\t\t\t\t\t\t\t              headers: {'Accept': 'application/json', 'Content-Type': 'application/json' ,'Authorization': 'Bearer ' + accessToken}\n\t\t\t\t\t\t\t          }).then(response => response.json())\n\t\t\t\t\t\t\t          //.then(data => console.log(data))\n\t\t\t\t\t\t\t          .then(data => {\n\t\t\t\t\t\t\t            if(!data){\n\t\t\t\t\t\t\t              return;\n\t\t\t\t\t\t\t            }else{\n\t\t\t\t\t\t\t              console.log(data)\n\t\t\t\t\t\t\t              data.tracks.map(song =>{\n\t\t\t\t\t\t\t                recom_songs.push(song.name)                       // song name\n\t\t\t\t\t\t\t                recom_songs_audio.push(song.preview_url)          // audio sample of song\n\t\t\t\t\t\t\t                recom_songs_img.push(song.album.images[2].url)    // small album image\n\t\t\t\t\t\t\t                artistName.push(song.artists[0].name)\n\t\t\t\t\t\t\t              })\n\n\t\t\t\t\t\t\t              this.setState({\n\t\t\t\t\t\t\t                songs: recom_songs,\n\t\t\t\t\t\t\t                songs_img: recom_songs_img,\n\t\t\t\t\t\t\t                songs_audio: recom_songs_audio,\n\t\t\t\t\t\t\t                artName: artistName\n\t\t\t\t\t\t\t              })\n\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t\t          });\n\t\t\t\t\t\t\t          //console.log([recom_songs, recom_songs_audio, recom_songs_img]);\n\t\t\t\t\t\t\t    });\n\t\t    \t\t\t});\n\t\t    \t\t})\n\t\t    \t}\n\t\t    \t\n\t\t    \t\n\n\t\t    });\n\t}\n\n\trender() {\n     return(\n      <div className=\"CF\">\n      \t{\n        Object.keys(this.state.song_name).map(index =>{\n          return (\n            <ul>\n              <a href={this.state.audio[index]} target={\"_blank\"} rel=\"noreferrer\">\n              <img src={this.state.album_img[index]} style={{width: '60px'}}/> {this.state.song_name[index] + \" - \" + this.state.artist[index]} <br />\n              </a>\n            </ul>\n          )\n        })\n      }\n      </div>\n     );\n    }\n}\n\n//const CB = new CollabFiltering();\nexport default CollabFiltering;\n//export default CB;"]},"metadata":{},"sourceType":"module"}