{"ast":null,"code":"var _jsxFileName = \"/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js\";\nimport './CBased.css';\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CBased extends Component {\n  getSongData(songIDS, accessToken, genres, artistID) {\n    // Get audio analysis features from the user's songs\n    const energy = []; //low level feature\n\n    const key = []; //high level feature\n\n    const loudness = []; //low level feature -- can be negative\n\n    const acoustic = []; //low level feature (?)\n\n    const instrum = []; //low level feature (?)\n\n    const liveness = []; //low level feature (?)\n\n    const valence = []; //low level feature (?)\n\n    const tempo = []; //high level feature\n\n    const duration = []; //song duration in ms!\n\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(response => response.json()) //.then(data => console.log(data.audio_features));\n    .then(data => {\n      // if(!data.audio_features){\n      //     return;\n      //   }else{\n      //console.log(data.audio_features)\n      data.audio_features.map((audio, i) => {\n        // if(!audio){\n        //   return;\n        // }\n        energy.push(Number(audio.energy));\n        key.push(audio.key);\n        loudness.push(audio.loudness);\n        acoustic.push(audio.acousticness);\n        instrum.push(audio.instrumentalness);\n        liveness.push(audio.liveness);\n        valence.push(audio.valence);\n        tempo.push(audio.tempo);\n        duration.push(audio.duration_ms);\n      });\n      const avg_energy = (energy.reduce((sum, curr) => sum + curr, 0) / energy.length).toFixed(3);\n      const avg_key = (key.reduce((sum, curr) => sum + curr, 0) / key.length).toFixed();\n      const avg_loud = (loudness.reduce((sum, curr) => sum + curr, 0) / loudness.length).toFixed(3);\n      const avg_acous = (acoustic.reduce((sum, curr) => sum + curr, 0) / acoustic.length).toFixed(3);\n      const avg_instr = (instrum.reduce((sum, curr) => sum + curr, 0) / instrum.length).toFixed(3);\n      const avg_liveness = (liveness.reduce((sum, curr) => sum + curr, 0) / liveness.length).toFixed(3);\n      const avg_val = (valence.reduce((sum, curr) => sum + curr, 0) / valence.length).toFixed(3);\n      const avg_tempo = (tempo.reduce((sum, curr) => sum + curr, 0) / tempo.length).toFixed(3);\n      const avg_duration = (duration.reduce((sum, curr) => sum + curr, 0) / duration.length).toFixed(); // Get the most popular genre of the user\n\n      const words = genres.split(',');\n      const wordCounts = {};\n      console.log(avg_energy);\n\n      for (var i = 0; i < words.length; i++) wordCounts[words[i]] = (wordCounts[words[i]] || 0) + 1;\n\n      const getMax = object => {\n        return Object.keys(object).filter(x => {\n          return object[x] == Math.max.apply(null, Object.values(object));\n        });\n      };\n\n      const userGenre = getMax(wordCounts).toString();\n      const song_seed = songIDS.split(','); //get user's top song for recommendation seed\n\n      console.log(artistID); // Get 20 recommendations of content based for the user\n\n      const promise_recom = fetch(\"https://api.spotify.com/v1/recommendations?limit=20&market=ES&seed_artists=\" + artistID + \"&seed_genres=\" + userGenre + \"&seed_tracks=\" + song_seed[0] + \"&target_acousticness=\" + avg_acous + \"&target_duration_ms=\" + avg_duration + \"&target_energy=\" + avg_energy + \"&target_instrumentalness=\" + avg_instr + \"&target_key=\" + avg_key + \"&target_liveness=\" + avg_liveness + \"&target_loudness=\" + avg_loud + \"&target_tempo=\" + avg_tempo + \"&target_valence=\" + avg_val, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + accessToken\n        }\n      }).then(response => response.json()).then(data => console.log(data)); //}\n    }); //console.log(\"...................\");\n    //console.log(this.state.songData);\n  } // componentDidMount(){\n  // }\n\n\n  render() {\n    let ids = this.props.songID;\n    let token = this.props.token;\n    let artistID = this.props.artistID;\n    let genres = this.props.genres;\n    let ene = this.getSongData(ids, token, genres, artistID);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Audio Feat \", artistID]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CBased;","map":{"version":3,"sources":["/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js"],"names":["React","Component","CBased","getSongData","songIDS","accessToken","genres","artistID","energy","key","loudness","acoustic","instrum","liveness","valence","tempo","duration","fetch","method","headers","then","response","json","data","audio_features","map","audio","i","push","Number","acousticness","instrumentalness","duration_ms","avg_energy","reduce","sum","curr","length","toFixed","avg_key","avg_loud","avg_acous","avg_instr","avg_liveness","avg_val","avg_tempo","avg_duration","words","split","wordCounts","console","log","getMax","object","Object","keys","filter","x","Math","max","apply","values","userGenre","toString","song_seed","promise_recom","render","ids","props","songID","token","ene"],"mappings":"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","sourcesContent":["import './CBased.css';\nimport React, {Component} from \"react\";\n\nclass CBased extends Component{\n\n  getSongData(songIDS,accessToken,genres,artistID){\n    // Get audio analysis features from the user's songs\n    const energy = [];      //low level feature\n    const key = [];         //high level feature\n    const loudness = [];    //low level feature -- can be negative\n    const acoustic = [];    //low level feature (?)\n    const instrum = [];     //low level feature (?)\n    const liveness = [];    //low level feature (?)\n    const valence = [];     //low level feature (?)\n    const tempo = [];       //high level feature\n    const duration = [];    //song duration in ms!\n\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {'Accept': 'application/json', 'Content-Type': 'application/json' , 'Authorization': 'Bearer ' + accessToken,}\n    }).then(response => response.json())\n    //.then(data => console.log(data.audio_features));\n    .then(data => {\n      // if(!data.audio_features){\n      //     return;\n      //   }else{\n          //console.log(data.audio_features)\n          data.audio_features.map((audio, i) => {\n            // if(!audio){\n            //   return;\n            // }\n            energy.push(Number(audio.energy))\n            key.push(audio.key)\n            loudness.push(audio.loudness)\n            acoustic.push(audio.acousticness)\n            instrum.push(audio.instrumentalness)\n            liveness.push(audio.liveness)\n            valence.push(audio.valence)\n            tempo.push(audio.tempo)\n            duration.push(audio.duration_ms)\n          });\n          const avg_energy = (energy.reduce((sum, curr) => sum + curr, 0)/energy.length).toFixed(3) ;            \n          const avg_key = (key.reduce((sum, curr) => sum + curr, 0)/key.length).toFixed() ;                     \n          const avg_loud = (loudness.reduce((sum, curr) => sum + curr, 0)/loudness.length).toFixed(3) ;          \n          const avg_acous = (acoustic.reduce((sum, curr) => sum + curr, 0)/acoustic.length).toFixed(3) ;           \n          const avg_instr = (instrum.reduce((sum, curr) => sum + curr, 0)/instrum.length).toFixed(3) ;           \n          const avg_liveness = (liveness.reduce((sum, curr) => sum + curr, 0)/liveness.length).toFixed(3) ;      \n          const avg_val = (valence.reduce((sum, curr) => sum + curr, 0)/valence.length).toFixed(3) ;\n          const avg_tempo = (tempo.reduce((sum, curr) => sum + curr, 0)/tempo.length).toFixed(3) ;\n          const avg_duration = (duration.reduce((sum, curr) => sum + curr, 0)/duration.length).toFixed() ;      \n\n          // Get the most popular genre of the user\n          const words = genres.split(',');\n          const wordCounts = { };\n          console.log(avg_energy);\n\n          for(var i = 0; i < words.length; i++)\n            wordCounts[words[i]] = (wordCounts[words[i]] || 0) + 1;\n\n          const getMax = object => {\n            return Object.keys(object).filter(x => {\n                 return object[x] == Math.max.apply(null, \n                 Object.values(object));\n            });\n          };\n\n          const userGenre = getMax(wordCounts).toString();\n          const song_seed = songIDS.split(','); //get user's top song for recommendation seed\n          console.log(artistID)\n          // Get 20 recommendations of content based for the user\n          const promise_recom = fetch(\"https://api.spotify.com/v1/recommendations?limit=20&market=ES&seed_artists=\" + artistID + \"&seed_genres=\" + userGenre +\n                    \"&seed_tracks=\" + song_seed[0] + \"&target_acousticness=\" + avg_acous + \"&target_duration_ms=\" + avg_duration + \n                    \"&target_energy=\" + avg_energy + \"&target_instrumentalness=\" + avg_instr + \"&target_key=\" + avg_key + \"&target_liveness=\" + avg_liveness +\n                    \"&target_loudness=\" + avg_loud + \"&target_tempo=\" + avg_tempo + \"&target_valence=\" + avg_val, {\n              method: 'GET',\n              headers: {'Accept': 'application/json', 'Content-Type': 'application/json' ,'Authorization': 'Bearer ' + accessToken}\n          }).then(response => response.json())\n          .then(data => console.log(data));\n\n        //}\n\n    });\n    \n    //console.log(\"...................\");\n    //console.log(this.state.songData);\n\n  }\n\n\n\n\n  // componentDidMount(){\n\n  // }\n\n  render() {\n\t   \n    let ids = this.props.songID\n    let token = this.props.token\n    let artistID = this.props.artistID\n    let genres = this.props.genres\n    let ene = this.getSongData(ids,token,genres,artistID)\n    \n\n    return(\n      <div>Audio Feat {artistID}</div>\n      \n    );\n\n\n  }\n    \n}\n\nexport default CBased;"]},"metadata":{},"sourceType":"module"}