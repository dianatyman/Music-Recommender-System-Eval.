{"ast":null,"code":"var _jsxFileName = \"/Users/dianatyman/Desktop/music-recom-eval/src/CFiltering/CollabFiltering.js\";\nimport './CollabFiltering.css';\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CollabFiltering extends Component {\n  constructor() {\n    super();\n    this.state = {\n      song_name: [],\n      album_img: [],\n      audio: [],\n      artist: []\n    };\n  }\n\n  componentDidMount() {\n    let userName = this.props.userName;\n    let token = this.props.token;\n    let artistID = this.props.artistID;\n    let genres = this.props.genres;\n    const playID_Disc = [];\n    const playID_collab = [];\n    const recom_songs = [];\n    const recom_songs_audio = [];\n    const recom_songs_img = [];\n    const artistName = [];\n    fetch(\"https://api.spotify.com/v1/users/\" + userName + \"/playlists?limit=50\", {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    }).then(response => response.json()).then(data => {\n      data.items.map(playlist => {\n        if (playlist.name == \"Descubrimiento semanal\" || playlist.name == \"Discover Weekly\") {\n          playID_Disc.push(playlist.id);\n        }\n\n        if (playlist.collaborative) {\n          playID_collab.push(playlist.id);\n        }\n      }); // Get Discover Weekly Collab Filtering Recomm's\n\n      if (playID_Disc.length > 0) {\n        playID_Disc.map(playlist => {\n          fetch(\"https://api.spotify.com/v1/playlists/\" + playlist + \"/tracks?market=ES&limit=20\", {\n            method: 'GET',\n            headers: {\n              'Authorization': 'Bearer ' + token\n            }\n          }).then(response => response.json()).then(data => {\n            if (!data) {\n              return;\n            } else {\n              data.items.map(dts => {\n                recom_songs.push(dts.track.name); // song name\n\n                recom_songs_audio.push(dts.track.preview_url); // audio sample of song\n\n                recom_songs_img.push(dts.track.album.images[2].url); // small album image\n\n                artistName.push(dts.track.artists[0].name);\n              });\n              this.setState({\n                song_name: recom_songs,\n                album_img: recom_songs_img,\n                audio: recom_songs_audio,\n                artist: artistName\n              });\n            }\n          });\n        });\n      } // }else if(playID_collab.length > 0){\n      // \tconst songIDS = []\n      // \t// Get audio analysis features from the user's songs\n      //  const energy = [];      //low level feature\n      //  const key = [];         //high level feature\n      //  const loudness = [];    //low level feature -- can be negative\n      //  const acoustic = [];    //low level feature (?)\n      //  const instrum = [];     //low level feature (?)\n      //  const liveness = [];    //low level feature (?)\n      //  const valence = [];     //low level feature (?)\n      //  const tempo = [];       //high level feature\n      //  const duration = [];    //song duration in ms!\n      //  const recom_songs = [];\n      //  const recom_songs_audio = [];\n      //  const recom_songs_img = [];\n      //  const artistName = [];\n      // \tplayID_collab.map(playlist => {\n      // \t\tfetch(\"https://api.spotify.com/v1/playlists/\" + playlist + \"/tracks?market=ES&limit=20\", {\n      // \t\t\tmethod: 'GET',\n      //  \t\t\t\theaders: {'Authorization': 'Bearer ' + token}\n      // \t\t}).then(response => response.json())\n      // \t\t.then(data => {\n      // \t\t\tdata.items.track.map(dts =>{\n      // \t\t\t\tsongIDS.push(dts.id)\n      // \t\t\t})\n      // \t\t\tfetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS.toString(), {\n      //       method: 'GET',\n      //       headers: {'Accept': 'application/json', 'Content-Type': 'application/json' , 'Authorization': 'Bearer ' + token}\n      //     }).then(response => response.json())\n      //     //.then(data => console.log(data.audio_features));\n      //     .then(data => {\n      //       // if(!data.audio_features){\n      //       //     return;\n      //       //   }else{\n      //           //console.log(data.audio_features)\n      //           data.audio_features.map((audio, i) => {\n      //             // if(!audio){\n      //             //   return;\n      //             // }\n      //             energy.push(Number(audio.energy))\n      //             key.push(audio.key)\n      //             loudness.push(audio.loudness)\n      //             acoustic.push(audio.acousticness)\n      //             instrum.push(audio.instrumentalness)\n      //             liveness.push(audio.liveness)\n      //             valence.push(audio.valence)\n      //             tempo.push(audio.tempo)\n      //             duration.push(audio.duration_ms)\n      //           });\n      //           const avg_energy = (energy.reduce((sum, curr) => sum + curr, 0)/energy.length).toFixed(3) ;            \n      //           const avg_key = (key.reduce((sum, curr) => sum + curr, 0)/key.length).toFixed() ;                     \n      //           const avg_loud = (loudness.reduce((sum, curr) => sum + curr, 0)/loudness.length).toFixed(3) ;          \n      //           const avg_acous = (acoustic.reduce((sum, curr) => sum + curr, 0)/acoustic.length).toFixed(3) ;           \n      //           const avg_instr = (instrum.reduce((sum, curr) => sum + curr, 0)/instrum.length).toFixed(3) ;           \n      //           const avg_liveness = (liveness.reduce((sum, curr) => sum + curr, 0)/liveness.length).toFixed(3) ;      \n      //           const avg_val = (valence.reduce((sum, curr) => sum + curr, 0)/valence.length).toFixed(3) ;\n      //           const avg_tempo = (tempo.reduce((sum, curr) => sum + curr, 0)/tempo.length).toFixed(3) ;\n      //           const avg_duration = (duration.reduce((sum, curr) => sum + curr, 0)/duration.length).toFixed() ;      \n      //           // Get the most popular genre of the user\n      //           const words = genres.split(',');\n      //           const wordCounts = { };\n      //           for(var i = 0; i < words.length; i++)\n      //             wordCounts[words[i]] = (wordCounts[words[i]] || 0) + 1;\n      //           const getMax = object => {\n      //             return Object.keys(object).filter(x => {\n      //                  return object[x] == Math.max.apply(null, \n      //                  Object.values(object));\n      //             });\n      //           };\n      //           const userGenre = getMax(wordCounts).toString();\n      //           const song_seed = songIDS.split(','); //get user's top song for recommendation seed\n      //           console.log(artistID)\n      //           // Get 20 recommendations of content based for the user\n      //           fetch(\"https://api.spotify.com/v1/recommendations?limit=20&market=ES&seed_artists=\" + artistID + \"&seed_genres=\" + userGenre +\n      //                     \"&seed_tracks=\" + song_seed[0] + \"&target_acousticness=\" + avg_acous + \"&target_duration_ms=\" + avg_duration + \n      //                     \"&target_energy=\" + avg_energy + \"&target_instrumentalness=\" + avg_instr + \"&target_key=\" + avg_key + \"&target_liveness=\" + avg_liveness +\n      //                     \"&target_loudness=\" + avg_loud + \"&target_tempo=\" + avg_tempo + \"&target_valence=\" + avg_val, {\n      //               method: 'GET',\n      //               headers: {'Accept': 'application/json', 'Content-Type': 'application/json' ,'Authorization': 'Bearer ' + token}\n      //           }).then(response => response.json())\n      //           //.then(data => console.log(data))\n      //           .then(data => {\n      //             if(!data){\n      //               return;\n      //             }else{\n      //               console.log(data)\n      //               data.tracks.map(song =>{\n      //                 recom_songs.push(song.name)                       // song name\n      //                 recom_songs_audio.push(song.preview_url)          // audio sample of song\n      //                 recom_songs_img.push(song.album.images[2].url)    // small album image\n      //                 artistName.push(song.artists[0].name)\n      //               })\n      //               this.setState({\n      //                 song_name: recom_songs,\n      //                 album_img: recom_songs_img,\n      //                 audio: recom_songs_audio,\n      //                 artist: artistName\n      //               })\n      //             }\n      //           });\n      //     });\n      // \t\t});\n      // \t})\n      // }else{\n      // \treturn;\n      // }\n\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CF\",\n      children: Object.keys(this.state.artist).map(index => {\n        return /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: this.state.audio[index],\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.album_img[index],\n              style: {\n                width: '60px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this), \" \", this.state.song_name[index] + \" - \" + this.state.artist[index], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 147\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 8\n    }, this);\n  }\n\n} //const CB = new CollabFiltering();\n\n\nexport default CollabFiltering; //export default CB;","map":{"version":3,"sources":["/Users/dianatyman/Desktop/music-recom-eval/src/CFiltering/CollabFiltering.js"],"names":["React","Component","CollabFiltering","constructor","state","song_name","album_img","audio","artist","componentDidMount","userName","props","token","artistID","genres","playID_Disc","playID_collab","recom_songs","recom_songs_audio","recom_songs_img","artistName","fetch","method","headers","then","response","json","data","items","map","playlist","name","push","id","collaborative","length","dts","track","preview_url","album","images","url","artists","setState","render","Object","keys","index","width"],"mappings":";AAAA,OAAO,uBAAP;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;AAEA,MAAMC,eAAN,SAA8BD,SAA9B,CAAuC;AAEtCE,EAAAA,WAAW,GAAE;AACZ;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,SAAS,EAAC,EADE;AAEZC,MAAAA,SAAS,EAAC,EAFE;AAGZC,MAAAA,KAAK,EAAC,EAHM;AAIZC,MAAAA,MAAM,EAAC;AAJK,KAAb;AAMA;;AAEDC,EAAAA,iBAAiB,GAAG;AACnB,QAAIC,QAAQ,GAAG,KAAKC,KAAL,CAAWD,QAA1B;AACA,QAAIE,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;AACA,QAAIC,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA1B;AACG,QAAIC,MAAM,GAAG,KAAKH,KAAL,CAAWG,MAAxB;AAEH,UAAMC,WAAW,GAAG,EAApB;AACA,UAAMC,aAAa,GAAG,EAAtB;AAEA,UAAMC,WAAW,GAAG,EAApB;AACG,UAAMC,iBAAiB,GAAG,EAA1B;AACA,UAAMC,eAAe,GAAG,EAAxB;AACA,UAAMC,UAAU,GAAG,EAAnB;AAEHC,IAAAA,KAAK,CAAC,sCAAsCX,QAAtC,GAAiD,qBAAlD,EAAyE;AACvEY,MAAAA,MAAM,EAAE,KAD+D;AAEvEC,MAAAA,OAAO,EAAE;AAAC,yBAAiB,YAAYX;AAA9B;AAF8D,KAAzE,CAAL,CAGOY,IAHP,CAGYC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHxB,EAIKF,IAJL,CAIUG,IAAI,IAAI;AACbA,MAAAA,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAeC,QAAQ,IAAI;AAC1B,YAAGA,QAAQ,CAACC,IAAT,IAAiB,wBAAjB,IAA6CD,QAAQ,CAACC,IAAT,IAAiB,iBAAjE,EAAmF;AAClFhB,UAAAA,WAAW,CAACiB,IAAZ,CAAiBF,QAAQ,CAACG,EAA1B;AACA;;AAED,YAAGH,QAAQ,CAACI,aAAZ,EAA0B;AACzBlB,UAAAA,aAAa,CAACgB,IAAd,CAAmBF,QAAQ,CAACG,EAA5B;AACA;AAED,OATD,EADa,CAYb;;AACA,UAAGlB,WAAW,CAACoB,MAAZ,GAAqB,CAAxB,EAA0B;AACzBpB,QAAAA,WAAW,CAACc,GAAZ,CAAgBC,QAAQ,IAAI;AAC3BT,UAAAA,KAAK,CAAC,0CAA0CS,QAA1C,GAAqD,4BAAtD,EAAoF;AACxFR,YAAAA,MAAM,EAAE,KADgF;AAEtFC,YAAAA,OAAO,EAAE;AAAC,+BAAiB,YAAYX;AAA9B;AAF6E,WAApF,CAAL,CAGGY,IAHH,CAGQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHpB,EAICF,IAJD,CAIMG,IAAI,IAAI;AACb,gBAAG,CAACA,IAAJ,EAAS;AACR;AACA,aAFD,MAEK;AACJA,cAAAA,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAeO,GAAG,IAAG;AACpBnB,gBAAAA,WAAW,CAACe,IAAZ,CAAiBI,GAAG,CAACC,KAAJ,CAAUN,IAA3B,EADoB,CACmC;;AAC9Cb,gBAAAA,iBAAiB,CAACc,IAAlB,CAAuBI,GAAG,CAACC,KAAJ,CAAUC,WAAjC,EAFW,CAE4C;;AACvDnB,gBAAAA,eAAe,CAACa,IAAhB,CAAqBI,GAAG,CAACC,KAAJ,CAAUE,KAAV,CAAgBC,MAAhB,CAAuB,CAAvB,EAA0BC,GAA/C,EAHW,CAG4C;;AACvDrB,gBAAAA,UAAU,CAACY,IAAX,CAAgBI,GAAG,CAACC,KAAJ,CAAUK,OAAV,CAAkB,CAAlB,EAAqBX,IAArC;AACT,eALD;AAOA,mBAAKY,QAAL,CAAc;AACbtC,gBAAAA,SAAS,EAAEY,WADE;AAEbX,gBAAAA,SAAS,EAAEa,eAFE;AAGbZ,gBAAAA,KAAK,EAAEW,iBAHM;AAIbV,gBAAAA,MAAM,EAAEY;AAJK,eAAd;AAMA;AAED,WAvBD;AAwBA,SAzBD;AA0BA,OAxCY,CAyCblKL;AAmKA;;AAEDwB,EAAAA,MAAM,GAAG;AAEL,wBACE;AAAK,MAAA,SAAS,EAAC,IAAf;AAAA,gBAEGC,MAAM,CAACC,IAAP,CAAY,KAAK1C,KAAL,CAAWI,MAAvB,EAA+BqB,GAA/B,CAAmCkB,KAAK,IAAG;AACzC,4BACE;AAAA,iCACE;AAAG,YAAA,IAAI,EAAE,KAAK3C,KAAL,CAAWG,KAAX,CAAiBwC,KAAjB,CAAT;AAAkC,YAAA,MAAM,EAAE,QAA1C;AAAoD,YAAA,GAAG,EAAC,YAAxD;AAAA,oCACA;AAAK,cAAA,GAAG,EAAE,KAAK3C,KAAL,CAAWE,SAAX,CAAqByC,KAArB,CAAV;AAAuC,cAAA,KAAK,EAAE;AAACC,gBAAAA,KAAK,EAAE;AAAR;AAA9C;AAAA;AAAA;AAAA;AAAA,oBADA,OACkE,KAAK5C,KAAL,CAAWC,SAAX,CAAqB0C,KAArB,IAA8B,KAA9B,GAAsC,KAAK3C,KAAL,CAAWI,MAAX,CAAkBuC,KAAlB,CADxG,oBACkI;AAAA;AAAA;AAAA;AAAA,oBADlI;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF;AAQD,OATD;AAFH;AAAA;AAAA;AAAA;AAAA,YADF;AAgBA;;AAjNkC,C,CAoNvC;;;AACA,eAAe7C,eAAf,C,CACA","sourcesContent":["import './CollabFiltering.css';\nimport React, {Component} from \"react\";\n\nclass CollabFiltering extends Component{\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tsong_name:[],\n\t\t\talbum_img:[],\n\t\t\taudio:[],\n\t\t\tartist:[]\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tlet userName = this.props.userName\n\t\tlet token = this.props.token\n\t\tlet artistID = this.props.artistID\n    \tlet genres = this.props.genres\n\n\t\tconst playID_Disc = []\n\t\tconst playID_collab = []\n\n\t\tconst recom_songs = [];\n\t    const recom_songs_audio = [];\n\t    const recom_songs_img = [];\n\t    const artistName = [];\n\n\t\tfetch(\"https://api.spotify.com/v1/users/\" + userName + \"/playlists?limit=50\", {\n\t\t      \tmethod: 'GET',\n\t\t      \theaders: {'Authorization': 'Bearer ' + token}\n\t\t    }).then(response => response.json())\n\t\t    .then(data => {\n\t\t    \tdata.items.map(playlist => {\n\t\t    \t\tif(playlist.name == \"Descubrimiento semanal\" || playlist.name == \"Discover Weekly\"){\n\t\t    \t\t\tplayID_Disc.push(playlist.id)\n\t\t    \t\t}\n\n\t\t    \t\tif(playlist.collaborative){\n\t\t    \t\t\tplayID_collab.push(playlist.id)\n\t\t    \t\t}\n\t\t    \t\t\n\t\t    \t});\n\n\t\t    \t// Get Discover Weekly Collab Filtering Recomm's\n\t\t    \tif(playID_Disc.length > 0){\n\t\t    \t\tplayID_Disc.map(playlist => {\n\t\t    \t\t\tfetch(\"https://api.spotify.com/v1/playlists/\" + playlist + \"/tracks?market=ES&limit=20\", {\n\t\t    \t\t\t\tmethod: 'GET',\n\t\t      \t\t\t\theaders: {'Authorization': 'Bearer ' + token}\n\t\t    \t\t\t}).then(response => response.json())\n\t\t    \t\t\t.then(data => {\n\t\t    \t\t\t\tif(!data){\n\t\t    \t\t\t\t\treturn;\n\t\t    \t\t\t\t}else{\n\t\t\t    \t\t\t\tdata.items.map(dts =>{\n\t\t\t    \t\t\t\t\trecom_songs.push(dts.track.name)                       // song name\n\t\t\t\t\t                recom_songs_audio.push(dts.track.preview_url)          // audio sample of song\n\t\t\t\t\t                recom_songs_img.push(dts.track.album.images[2].url)    // small album image\n\t\t\t\t\t                artistName.push(dts.track.artists[0].name)\n\t\t\t    \t\t\t\t})\n\n\t\t\t    \t\t\t\tthis.setState({\n\t\t    \t\t\t\t\t\tsong_name: recom_songs,\n\t\t    \t\t\t\t\t\talbum_img: recom_songs_img,\n\t\t    \t\t\t\t\t\taudio: recom_songs_audio,\n\t\t    \t\t\t\t\t\tartist: artistName\n\t\t    \t\t\t\t\t})\n\t\t\t    \t\t\t}\n\t\t\t    \t\t\t\n\t\t    \t\t\t})\n\t\t    \t\t})\n\t\t    \t}\n\t\t    \t// }else if(playID_collab.length > 0){\n\n\t\t    \t// \tconst songIDS = []\n\n\t\t    \t// \t// Get audio analysis features from the user's songs\n\t\t\t\t   //  const energy = [];      //low level feature\n\t\t\t\t   //  const key = [];         //high level feature\n\t\t\t\t   //  const loudness = [];    //low level feature -- can be negative\n\t\t\t\t   //  const acoustic = [];    //low level feature (?)\n\t\t\t\t   //  const instrum = [];     //low level feature (?)\n\t\t\t\t   //  const liveness = [];    //low level feature (?)\n\t\t\t\t   //  const valence = [];     //low level feature (?)\n\t\t\t\t   //  const tempo = [];       //high level feature\n\t\t\t\t   //  const duration = [];    //song duration in ms!\n\n\t\t\t\t   //  const recom_songs = [];\n\t\t\t\t   //  const recom_songs_audio = [];\n\t\t\t\t   //  const recom_songs_img = [];\n\t\t\t\t   //  const artistName = [];\n\n\t\t    \t// \tplayID_collab.map(playlist => {\n\t\t    \t// \t\tfetch(\"https://api.spotify.com/v1/playlists/\" + playlist + \"/tracks?market=ES&limit=20\", {\n\t\t    \t// \t\t\tmethod: 'GET',\n\t\t     //  \t\t\t\theaders: {'Authorization': 'Bearer ' + token}\n\t\t    \t// \t\t}).then(response => response.json())\n\t\t    \t// \t\t.then(data => {\n\t\t    \t// \t\t\tdata.items.track.map(dts =>{\n\t\t    \t// \t\t\t\tsongIDS.push(dts.id)\n\t\t    \t// \t\t\t})\n\n\t\t    \t// \t\t\tfetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS.toString(), {\n\t\t\t\t\t\t\t//       method: 'GET',\n\t\t\t\t\t\t\t//       headers: {'Accept': 'application/json', 'Content-Type': 'application/json' , 'Authorization': 'Bearer ' + token}\n\t\t\t\t\t\t\t//     }).then(response => response.json())\n\t\t\t\t\t\t\t//     //.then(data => console.log(data.audio_features));\n\t\t\t\t\t\t\t//     .then(data => {\n\t\t\t\t\t\t\t//       // if(!data.audio_features){\n\t\t\t\t\t\t\t//       //     return;\n\t\t\t\t\t\t\t//       //   }else{\n\t\t\t\t\t\t\t//           //console.log(data.audio_features)\n\t\t\t\t\t\t\t//           data.audio_features.map((audio, i) => {\n\t\t\t\t\t\t\t//             // if(!audio){\n\t\t\t\t\t\t\t//             //   return;\n\t\t\t\t\t\t\t//             // }\n\t\t\t\t\t\t\t//             energy.push(Number(audio.energy))\n\t\t\t\t\t\t\t//             key.push(audio.key)\n\t\t\t\t\t\t\t//             loudness.push(audio.loudness)\n\t\t\t\t\t\t\t//             acoustic.push(audio.acousticness)\n\t\t\t\t\t\t\t//             instrum.push(audio.instrumentalness)\n\t\t\t\t\t\t\t//             liveness.push(audio.liveness)\n\t\t\t\t\t\t\t//             valence.push(audio.valence)\n\t\t\t\t\t\t\t//             tempo.push(audio.tempo)\n\t\t\t\t\t\t\t//             duration.push(audio.duration_ms)\n\t\t\t\t\t\t\t//           });\n\t\t\t\t\t\t\t//           const avg_energy = (energy.reduce((sum, curr) => sum + curr, 0)/energy.length).toFixed(3) ;            \n\t\t\t\t\t\t\t//           const avg_key = (key.reduce((sum, curr) => sum + curr, 0)/key.length).toFixed() ;                     \n\t\t\t\t\t\t\t//           const avg_loud = (loudness.reduce((sum, curr) => sum + curr, 0)/loudness.length).toFixed(3) ;          \n\t\t\t\t\t\t\t//           const avg_acous = (acoustic.reduce((sum, curr) => sum + curr, 0)/acoustic.length).toFixed(3) ;           \n\t\t\t\t\t\t\t//           const avg_instr = (instrum.reduce((sum, curr) => sum + curr, 0)/instrum.length).toFixed(3) ;           \n\t\t\t\t\t\t\t//           const avg_liveness = (liveness.reduce((sum, curr) => sum + curr, 0)/liveness.length).toFixed(3) ;      \n\t\t\t\t\t\t\t//           const avg_val = (valence.reduce((sum, curr) => sum + curr, 0)/valence.length).toFixed(3) ;\n\t\t\t\t\t\t\t//           const avg_tempo = (tempo.reduce((sum, curr) => sum + curr, 0)/tempo.length).toFixed(3) ;\n\t\t\t\t\t\t\t//           const avg_duration = (duration.reduce((sum, curr) => sum + curr, 0)/duration.length).toFixed() ;      \n\n\t\t\t\t\t\t\t//           // Get the most popular genre of the user\n\t\t\t\t\t\t\t//           const words = genres.split(',');\n\t\t\t\t\t\t\t//           const wordCounts = { };\n\n\t\t\t\t\t\t\t//           for(var i = 0; i < words.length; i++)\n\t\t\t\t\t\t\t//             wordCounts[words[i]] = (wordCounts[words[i]] || 0) + 1;\n\n\t\t\t\t\t\t\t//           const getMax = object => {\n\t\t\t\t\t\t\t//             return Object.keys(object).filter(x => {\n\t\t\t\t\t\t\t//                  return object[x] == Math.max.apply(null, \n\t\t\t\t\t\t\t//                  Object.values(object));\n\t\t\t\t\t\t\t//             });\n\t\t\t\t\t\t\t//           };\n\n\t\t\t\t\t\t\t//           const userGenre = getMax(wordCounts).toString();\n\t\t\t\t\t\t\t//           const song_seed = songIDS.split(','); //get user's top song for recommendation seed\n\t\t\t\t\t\t\t//           console.log(artistID)\n\t\t\t\t\t\t\t//           // Get 20 recommendations of content based for the user\n\t\t\t\t\t\t\t//           fetch(\"https://api.spotify.com/v1/recommendations?limit=20&market=ES&seed_artists=\" + artistID + \"&seed_genres=\" + userGenre +\n\t\t\t\t\t\t\t//                     \"&seed_tracks=\" + song_seed[0] + \"&target_acousticness=\" + avg_acous + \"&target_duration_ms=\" + avg_duration + \n\t\t\t\t\t\t\t//                     \"&target_energy=\" + avg_energy + \"&target_instrumentalness=\" + avg_instr + \"&target_key=\" + avg_key + \"&target_liveness=\" + avg_liveness +\n\t\t\t\t\t\t\t//                     \"&target_loudness=\" + avg_loud + \"&target_tempo=\" + avg_tempo + \"&target_valence=\" + avg_val, {\n\t\t\t\t\t\t\t//               method: 'GET',\n\t\t\t\t\t\t\t//               headers: {'Accept': 'application/json', 'Content-Type': 'application/json' ,'Authorization': 'Bearer ' + token}\n\t\t\t\t\t\t\t//           }).then(response => response.json())\n\t\t\t\t\t\t\t//           //.then(data => console.log(data))\n\t\t\t\t\t\t\t//           .then(data => {\n\t\t\t\t\t\t\t//             if(!data){\n\t\t\t\t\t\t\t//               return;\n\t\t\t\t\t\t\t//             }else{\n\t\t\t\t\t\t\t//               console.log(data)\n\t\t\t\t\t\t\t//               data.tracks.map(song =>{\n\t\t\t\t\t\t\t//                 recom_songs.push(song.name)                       // song name\n\t\t\t\t\t\t\t//                 recom_songs_audio.push(song.preview_url)          // audio sample of song\n\t\t\t\t\t\t\t//                 recom_songs_img.push(song.album.images[2].url)    // small album image\n\t\t\t\t\t\t\t//                 artistName.push(song.artists[0].name)\n\t\t\t\t\t\t\t//               })\n\n\t\t\t\t\t\t\t//               this.setState({\n\t\t\t\t\t\t\t//                 song_name: recom_songs,\n\t\t\t\t\t\t\t//                 album_img: recom_songs_img,\n\t\t\t\t\t\t\t//                 audio: recom_songs_audio,\n\t\t\t\t\t\t\t//                 artist: artistName\n\t\t\t\t\t\t\t//               })\n\t\t\t\t\t\t\t//             }\n\t\t\t\t\t\t\t//           });\n\t\t\t\t\t\t\t        \n\t\t\t\t\t\t\t//     });\n\t\t    \t// \t\t});\n\t\t    \t// \t})\n\t\t    \t// }else{\n\t\t    \t// \treturn;\n\t\t    \t// }\n\t\t    });\n\t}\n\n\trender() {\n\n     return(\n\t      <div className=\"CF\">\n\t      \t{\n\t\t        Object.keys(this.state.artist).map(index =>{\n\t\t          return (\n\t\t            <ul>\n\t\t              <a href={this.state.audio[index]} target={\"_blank\"} rel=\"noreferrer\">\n\t\t              <img src={this.state.album_img[index]} style={{width: '60px'}}/> {this.state.song_name[index] + \" - \" + this.state.artist[index]} <br />\n\t\t              </a>\n\t\t            </ul>\n\t\t            \n\t\t          )\n\t\t        })\n\t      }\n\t      </div>\n     );\n    }\n}\n\n//const CB = new CollabFiltering();\nexport default CollabFiltering;\n//export default CB;"]},"metadata":{},"sourceType":"module"}