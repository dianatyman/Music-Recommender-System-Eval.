{"ast":null,"code":"var _jsxFileName = \"/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js\";\nimport './CBased.css';\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CBased extends Component {\n  getSongData(songIDS, accessToken, limit) {\n    // Get audio analysis features from the user's songs\n    const energy = []; //low level feature\n\n    const key = []; //high level feature\n\n    const loudness = []; //low level feature\n\n    const acoustic = []; //low level feature (?)\n\n    const instrum = []; //low level feature (?)\n\n    const liveness = []; //low level feature (?)\n\n    const valence = []; //low level feature (?)\n\n    const tempo = []; //high level feature\n\n    const duration = []; //song duration in ms!\n\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(response => response.json()) //.then(data => console.log(data.audio_features));\n    .then(data => {\n      data.audio_features.map((audio, i) => {\n        energy.push(Number(audio.energy));\n        key.push(audio.key);\n        loudness.push(audio.loudness);\n        acoustic.push(audio.acousticness);\n        instrum.push(audio.instrumentalness);\n        liveness.push(audio.liveness);\n        valence.push(audio.valence);\n        tempo.push(audio.tempo);\n        duration.push(audio.duration_ms);\n      });\n      const avg_energy = energy.reduce((sum, curr) => sum + curr, 0);\n      console.log(enery.length);\n    });\n    const avg_energy = energy.reduce((sum, curr) => sum + curr, 0); //console.log(energy);\n\n    let energy_s = energy.map(num => Number(num)); //console.log(avg_energy);\n\n    return avg_energy; //console.log(\"...................\");\n    //console.log(this.state.songData);\n  } // componentDidMount(){\n  // }\n\n\n  render() {\n    let ids = this.props.songID;\n    let token = this.props.token;\n    let limit = this.props.limit;\n    let ene = this.getSongData(ids, token, limit);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Audio Feat \", ene]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CBased;","map":{"version":3,"sources":["/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js"],"names":["React","Component","CBased","getSongData","songIDS","accessToken","limit","energy","key","loudness","acoustic","instrum","liveness","valence","tempo","duration","fetch","method","headers","then","response","json","data","audio_features","map","audio","i","push","Number","acousticness","instrumentalness","duration_ms","avg_energy","reduce","sum","curr","console","log","enery","length","energy_s","num","render","ids","props","songID","token","ene"],"mappings":"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","sourcesContent":["import './CBased.css';\nimport React, {Component} from \"react\";\n\nclass CBased extends Component{\n\n  getSongData(songIDS,accessToken,limit){\n    // Get audio analysis features from the user's songs\n    const energy = [];      //low level feature\n    const key = [];         //high level feature\n    const loudness = [];    //low level feature\n    const acoustic = [];    //low level feature (?)\n    const instrum = [];     //low level feature (?)\n    const liveness = [];    //low level feature (?)\n    const valence = [];     //low level feature (?)\n    const tempo = [];       //high level feature\n    const duration = [];    //song duration in ms!\n\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {'Authorization': 'Bearer ' + accessToken}\n    }).then(response => response.json())\n    //.then(data => console.log(data.audio_features));\n    .then(data => {\n      data.audio_features.map((audio, i) => {\n        energy.push(Number(audio.energy))\n        key.push(audio.key)\n        loudness.push(audio.loudness)\n        acoustic.push(audio.acousticness)\n        instrum.push(audio.instrumentalness)\n        liveness.push(audio.liveness)\n        valence.push(audio.valence)\n        tempo.push(audio.tempo)\n        duration.push(audio.duration_ms)\n      });\n      const avg_energy = energy.reduce((sum, curr) => sum + curr, 0) ;\n      console.log(enery.length);\n\n    });\n    const avg_energy = energy.reduce((sum, curr) => sum + curr, 0);\n    //console.log(energy);\n    let energy_s = energy.map(num => Number(num));\n\n    //console.log(avg_energy);\n    return avg_energy;\n    //console.log(\"...................\");\n    //console.log(this.state.songData);\n\n  }\n\n\n\n  // componentDidMount(){\n\n  // }\n\n  render() {\n\t   \n    let ids = this.props.songID\n    let token = this.props.token\n    let limit = this.props.limit\n    let ene = this.getSongData(ids,token,limit)\n\n    return(\n      <div>Audio Feat {ene}</div>\n      \n    );\n\n\n  }\n    \n}\n\nexport default CBased;"]},"metadata":{},"sourceType":"module"}