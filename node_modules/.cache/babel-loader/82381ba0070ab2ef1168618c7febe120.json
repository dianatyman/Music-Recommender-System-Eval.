{"ast":null,"code":"var _jsxFileName = \"/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js\";\nimport './CBased.css';\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CBased extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userName: '',\n      token: '',\n      songName: [],\n      songID: [],\n      songIDs: '',\n      data: [],\n      limit: 10\n    };\n  }\n\n  getData(accessToken) {\n    // const songs_str = '';\n    // const ids_str = '';\n    const ids = [];\n    fetch('https://api.spotify.com/v1/me/top/tracks?limit=' + this.state.limit, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + accessToken,\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()) //.then(data => this.setState(state => {\n    .then(data => {\n      //data.items.map(i => state.userData.push(!i.name))\n      //console.log(data);\n      // data.items.map(function(i){\n      //   if (!state.songName.includes(i.name) && !state.songID.includes(i.id)){\n      //     state.songName.push(i.name);\n      //     state.songID.push(i.id);\n      //   }\n      //   return state.songName && state.songID;\n      // })\n      data.items.map(i => {\n        if (!ids.includes(i.id)) {\n          ids.push(i.id);\n        }\n\n        this.getSongData(ids.toString(), accessToken); //return songs_str && ids_str;\n      });\n    }); // .then(ids_str => this.setState({\n    //   songIDs: ids_str\n    // }));\n    // Check if it retreives song name and id correctly\n    //console.log(this.state.songID);\n  }\n\n  getUserData(accessToken) {\n    // Fetch User's profile information\n    fetch('https://api.spotify.com/v1/me', {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(response => response.json()).then(data => this.setState({\n      userName: data.display_name\n    }));\n  }\n\n  getSongData(songIDS, accessToken) {\n    // Get audio analysis features from the user's songs\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(response => response.json()).then(data => console.log(data));\n  }\n\n  componentDidMount() {\n    const url = new URL(window.location.href);\n    const accessToken = url.searchParams.get('access_token'); //console.log(accessToken);\n\n    this.setState({\n      token: accessToken\n    });\n    console.log(accessToken);\n\n    if (accessToken) {\n      this.getUserData(accessToken);\n      this.getData(accessToken);\n      this.setState({\n        songIDs: this.state.songID.toString()\n      });\n    }\n\n    ; // this.getSongData(this.state.songID);\n  }\n\n  render() {\n    //console.log(Object.keys(this.state.songName).map(key => (this.state.songName[key])));\n    //console.log(this.state.songName[1]);\n    if (!this.state.token) {\n      console.log(\"LALALALLAALL\");\n      return 'la';\n    }\n\n    ; // This will render once all the specific results have been fetched\n\n    if (this.state.token) {\n      console.log(\"hey\");\n      return this.state.songName.map((song, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"song: \", song]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this);\n      });\n    }\n\n    ; // return(\n    // \t\t<div className=\"CB\">\n    //  \t\t\t<h1 style={{'fontSize': '35px','marginTop': '5px' }}>Content Based Reccommendation!</h1>\n    //  \t\t\t<h1 style={{'fontSize': '15px','marginTop': '5px' }}>User top songs:  \n    //          <div>\n    //            {this.state.songName.map((song, i) => {\n    //              return (\n    //                <div key={i}>\n    //                  1st API call data:\n    //                  { song }\n    //                </div>\n    //              );\n    //            })}\n    //          </div>\n    //        </h1>\n    //  \t</div>\n    // \t);\n  }\n\n}\n\nexport default CBased;","map":{"version":3,"sources":["/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js"],"names":["React","Component","CBased","constructor","state","userName","token","songName","songID","songIDs","data","limit","getData","accessToken","ids","fetch","method","headers","then","response","json","items","map","i","includes","id","push","getSongData","toString","getUserData","setState","display_name","songIDS","console","log","componentDidMount","url","URL","window","location","href","searchParams","get","render","song"],"mappings":"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","sourcesContent":["import './CBased.css';\nimport React, {Component} from \"react\";\n\nclass CBased extends Component{\n\n\tconstructor() {\n    super();\n    this.state = {\n      userName:'',\n      token:'',\n      songName:[],\n      songID:[],\n      songIDs:'',\n      data: [],\n      limit:10\n    }\n  }\n\n  getData (accessToken) {\n\n    // const songs_str = '';\n    // const ids_str = '';\n    const ids = [];\n\n    fetch('https://api.spotify.com/v1/me/top/tracks?limit=' + this.state.limit, {\n      method: 'GET',\n      headers: {'Authorization': 'Bearer ' + accessToken,\n                'Content-Type': 'application/json'}\n    }).then(response => response.json())\n    //.then(data => this.setState(state => {\n    .then(data =>  {\n      //data.items.map(i => state.userData.push(!i.name))\n      //console.log(data);\n      // data.items.map(function(i){\n      //   if (!state.songName.includes(i.name) && !state.songID.includes(i.id)){\n      //     state.songName.push(i.name);\n      //     state.songID.push(i.id);\n      //   }\n      //   return state.songName && state.songID;\n      // })\n      data.items.map((i) => {\n        if (!ids.includes(i.id)){\n          ids.push(i.id);\n        }\n        this.getSongData(ids.toString(),accessToken);\n        //return songs_str && ids_str;\n      })\n    });\n    // .then(ids_str => this.setState({\n    //   songIDs: ids_str\n    // }));\n    \n\n    // Check if it retreives song name and id correctly\n    //console.log(this.state.songID);\n  }\n\n  getUserData(accessToken){\n  \t// Fetch User's profile information\n    fetch('https://api.spotify.com/v1/me', {\n      method: 'GET',\n      headers: {'Authorization': 'Bearer ' + accessToken}\n    }).then(response => response.json())\n    .then(data => this.setState({\n      userName: data.display_name\n    }));\n  }\n\n  getSongData(songIDS,accessToken){\n    // Get audio analysis features from the user's songs\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {'Authorization': 'Bearer ' + accessToken}\n    }).then(response => response.json())\n    .then(data => console.log(data));\n\n  }\n\n  componentDidMount() {\n    const url = new URL(window.location.href);\n    const accessToken = url.searchParams.get('access_token');\n\t  //console.log(accessToken);\n\t  this.setState({\n        \ttoken: accessToken\n    });\n\n    console.log(accessToken);\n\n    if(accessToken){\n    \tthis.getUserData(accessToken);\n      this.getData(accessToken);\n      this.setState({\n        songIDs: this.state.songID.toString()\n      });\n    };\n\n    // this.getSongData(this.state.songID);\n\n  }\n\n\trender() {\n\t\t//console.log(Object.keys(this.state.songName).map(key => (this.state.songName[key])));\n    //console.log(this.state.songName[1]);\n    if(!this.state.token){\n      console.log(\"LALALALLAALL\");\n      return 'la';\n    };\n\n\n    // This will render once all the specific results have been fetched\n    if(this.state.token){\n      console.log(\"hey\");\n      return this.state.songName.map((song, i) => {\n        return (\n            <div key={i}>\n                    song: {song}\n            </div>\n        );\n      });\n    };\n    \n\n    \t// return(\n     // \t\t<div className=\"CB\">\n     //  \t\t\t<h1 style={{'fontSize': '35px','marginTop': '5px' }}>Content Based Reccommendation!</h1>\n     //  \t\t\t<h1 style={{'fontSize': '15px','marginTop': '5px' }}>User top songs:  \n     //          <div>\n     //            {this.state.songName.map((song, i) => {\n     //              return (\n     //                <div key={i}>\n     //                  1st API call data:\n     //                  { song }\n     //                </div>\n     //              );\n     //            })}\n     //          </div>\n     //        </h1>\n     //  \t</div>\n      \t\t\n     // \t);\n   }\n    \n}\n\nexport default CBased;"]},"metadata":{},"sourceType":"module"}