{"ast":null,"code":"var _jsxFileName = \"/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js\",\n    _s = $RefreshSig$();\n\nimport './CBased.css';\nimport React, { Component, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useAudio = url => {\n  _s();\n\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n\n  const toggle = () => setPlaying(!playing);\n\n  useEffect(() => {\n    playing ? audio.play() : audio.pause();\n  }, [playing]);\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, []);\n  return [playing, toggle];\n};\n\n_s(useAudio, \"GtM9ncdyEaTcm0NdOFCfRvb7ZtI=\");\n\nclass CBased extends Component {\n  constructor() {\n    super();\n    this.state = {\n      songs: [],\n      songs_audio: [],\n      songs_img: []\n    };\n  } //getSongData(songIDS,accessToken,genres,artistID) {\n\n\n  componentDidMount() {\n    let songIDS = this.props.songID;\n    let accessToken = this.props.token;\n    let artistID = this.props.artistID;\n    let genres = this.props.genres; // Get audio analysis features from the user's songs\n\n    const energy = []; //low level feature\n\n    const key = []; //high level feature\n\n    const loudness = []; //low level feature -- can be negative\n\n    const acoustic = []; //low level feature (?)\n\n    const instrum = []; //low level feature (?)\n\n    const liveness = []; //low level feature (?)\n\n    const valence = []; //low level feature (?)\n\n    const tempo = []; //high level feature\n\n    const duration = []; //song duration in ms!\n\n    const recom_songs = [];\n    const recom_songs_audio = [];\n    const recom_songs_img = [];\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer ' + accessToken\n      }\n    }).then(response => response.json()) //.then(data => console.log(data.audio_features));\n    .then(data => {\n      // if(!data.audio_features){\n      //     return;\n      //   }else{\n      //console.log(data.audio_features)\n      data.audio_features.map((audio, i) => {\n        // if(!audio){\n        //   return;\n        // }\n        energy.push(Number(audio.energy));\n        key.push(audio.key);\n        loudness.push(audio.loudness);\n        acoustic.push(audio.acousticness);\n        instrum.push(audio.instrumentalness);\n        liveness.push(audio.liveness);\n        valence.push(audio.valence);\n        tempo.push(audio.tempo);\n        duration.push(audio.duration_ms);\n      });\n      const avg_energy = (energy.reduce((sum, curr) => sum + curr, 0) / energy.length).toFixed(3);\n      const avg_key = (key.reduce((sum, curr) => sum + curr, 0) / key.length).toFixed();\n      const avg_loud = (loudness.reduce((sum, curr) => sum + curr, 0) / loudness.length).toFixed(3);\n      const avg_acous = (acoustic.reduce((sum, curr) => sum + curr, 0) / acoustic.length).toFixed(3);\n      const avg_instr = (instrum.reduce((sum, curr) => sum + curr, 0) / instrum.length).toFixed(3);\n      const avg_liveness = (liveness.reduce((sum, curr) => sum + curr, 0) / liveness.length).toFixed(3);\n      const avg_val = (valence.reduce((sum, curr) => sum + curr, 0) / valence.length).toFixed(3);\n      const avg_tempo = (tempo.reduce((sum, curr) => sum + curr, 0) / tempo.length).toFixed(3);\n      const avg_duration = (duration.reduce((sum, curr) => sum + curr, 0) / duration.length).toFixed(); // Get the most popular genre of the user\n\n      const words = genres.split(',');\n      const wordCounts = {};\n\n      for (var i = 0; i < words.length; i++) wordCounts[words[i]] = (wordCounts[words[i]] || 0) + 1;\n\n      const getMax = object => {\n        return Object.keys(object).filter(x => {\n          return object[x] == Math.max.apply(null, Object.values(object));\n        });\n      };\n\n      const userGenre = getMax(wordCounts).toString();\n      const song_seed = songIDS.split(','); //get user's top song for recommendation seed\n\n      console.log(artistID); // Get 20 recommendations of content based for the user\n\n      fetch(\"https://api.spotify.com/v1/recommendations?limit=20&market=ES&seed_artists=\" + artistID + \"&seed_genres=\" + userGenre + \"&seed_tracks=\" + song_seed[0] + \"&target_acousticness=\" + avg_acous + \"&target_duration_ms=\" + avg_duration + \"&target_energy=\" + avg_energy + \"&target_instrumentalness=\" + avg_instr + \"&target_key=\" + avg_key + \"&target_liveness=\" + avg_liveness + \"&target_loudness=\" + avg_loud + \"&target_tempo=\" + avg_tempo + \"&target_valence=\" + avg_val, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + accessToken\n        }\n      }).then(response => response.json()) //.then(data => console.log(data))\n      .then(data => {\n        if (!data) {\n          return;\n        } else {\n          data.tracks.map(song => {\n            recom_songs.push(song.name); // song name\n\n            recom_songs_audio.push(song.preview_url); // audio sample of song\n\n            recom_songs_img.push(song.album.images[2].url); // small album image\n          });\n          this.setState({\n            songs: recom_songs,\n            songs_img: recom_songs_img,\n            songs_audio: recom_songs_audio\n          });\n        }\n      }); //console.log([recom_songs, recom_songs_audio, recom_songs_img]);\n    });\n  }\n\n  render() {\n    // let ids = this.props.songID\n    // let token = this.props.token\n    // let artistID = this.props.artistID\n    // let genres = this.props.genres\n    console.log(this.state.songs);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CB\",\n      children: Object.keys(this.state.songs).map(index => {\n        return /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: this.state.songs_img[index],\n              style: {\n                width: '60px'\n              },\n              onClick: new Audio(this.state.songs_audio[index])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this), \" \", this.state.songs[index], \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 174\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default CBased;","map":{"version":3,"sources":["/Users/dianatyman/Desktop/music-recom-eval/src/CBased/CBased.js"],"names":["React","Component","useState","useEffect","useAudio","url","audio","Audio","playing","setPlaying","toggle","play","pause","addEventListener","removeEventListener","CBased","constructor","state","songs","songs_audio","songs_img","componentDidMount","songIDS","props","songID","accessToken","token","artistID","genres","energy","key","loudness","acoustic","instrum","liveness","valence","tempo","duration","recom_songs","recom_songs_audio","recom_songs_img","fetch","method","headers","then","response","json","data","audio_features","map","i","push","Number","acousticness","instrumentalness","duration_ms","avg_energy","reduce","sum","curr","length","toFixed","avg_key","avg_loud","avg_acous","avg_instr","avg_liveness","avg_val","avg_tempo","avg_duration","words","split","wordCounts","getMax","object","Object","keys","filter","x","Math","max","apply","values","userGenre","toString","song_seed","console","log","tracks","song","name","preview_url","album","images","setState","render","index","width"],"mappings":"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","sourcesContent":["import './CBased.css';\nimport React, {Component, useState, useEffect} from \"react\";\n\nconst useAudio = url => {\n  const [audio] = useState(new Audio(url));\n  const [playing, setPlaying] = useState(false);\n\n  const toggle = () => setPlaying(!playing);\n\n  useEffect(() => {\n      playing ? audio.play() : audio.pause();\n    },\n    [playing]\n  );\n\n  useEffect(() => {\n    audio.addEventListener('ended', () => setPlaying(false));\n    return () => {\n      audio.removeEventListener('ended', () => setPlaying(false));\n    };\n  }, []);\n\n  return [playing, toggle];\n};\n\nclass CBased extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n      songs:[],\n      songs_audio:[],\n      songs_img:[]\n    }\n  }\n\n  //getSongData(songIDS,accessToken,genres,artistID) {\n  componentDidMount() {\n\n    let songIDS = this.props.songID\n    let accessToken = this.props.token\n    let artistID = this.props.artistID\n    let genres = this.props.genres\n\n    // Get audio analysis features from the user's songs\n    const energy = [];      //low level feature\n    const key = [];         //high level feature\n    const loudness = [];    //low level feature -- can be negative\n    const acoustic = [];    //low level feature (?)\n    const instrum = [];     //low level feature (?)\n    const liveness = [];    //low level feature (?)\n    const valence = [];     //low level feature (?)\n    const tempo = [];       //high level feature\n    const duration = [];    //song duration in ms!\n\n    const recom_songs = [];\n    const recom_songs_audio = [];\n    const recom_songs_img = [];\n\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {'Accept': 'application/json', 'Content-Type': 'application/json' , 'Authorization': 'Bearer ' + accessToken}\n    }).then(response => response.json())\n    //.then(data => console.log(data.audio_features));\n    .then(data => {\n      // if(!data.audio_features){\n      //     return;\n      //   }else{\n          //console.log(data.audio_features)\n          data.audio_features.map((audio, i) => {\n            // if(!audio){\n            //   return;\n            // }\n            energy.push(Number(audio.energy))\n            key.push(audio.key)\n            loudness.push(audio.loudness)\n            acoustic.push(audio.acousticness)\n            instrum.push(audio.instrumentalness)\n            liveness.push(audio.liveness)\n            valence.push(audio.valence)\n            tempo.push(audio.tempo)\n            duration.push(audio.duration_ms)\n          });\n          const avg_energy = (energy.reduce((sum, curr) => sum + curr, 0)/energy.length).toFixed(3) ;            \n          const avg_key = (key.reduce((sum, curr) => sum + curr, 0)/key.length).toFixed() ;                     \n          const avg_loud = (loudness.reduce((sum, curr) => sum + curr, 0)/loudness.length).toFixed(3) ;          \n          const avg_acous = (acoustic.reduce((sum, curr) => sum + curr, 0)/acoustic.length).toFixed(3) ;           \n          const avg_instr = (instrum.reduce((sum, curr) => sum + curr, 0)/instrum.length).toFixed(3) ;           \n          const avg_liveness = (liveness.reduce((sum, curr) => sum + curr, 0)/liveness.length).toFixed(3) ;      \n          const avg_val = (valence.reduce((sum, curr) => sum + curr, 0)/valence.length).toFixed(3) ;\n          const avg_tempo = (tempo.reduce((sum, curr) => sum + curr, 0)/tempo.length).toFixed(3) ;\n          const avg_duration = (duration.reduce((sum, curr) => sum + curr, 0)/duration.length).toFixed() ;      \n\n          // Get the most popular genre of the user\n          const words = genres.split(',');\n          const wordCounts = { };\n\n          for(var i = 0; i < words.length; i++)\n            wordCounts[words[i]] = (wordCounts[words[i]] || 0) + 1;\n\n          const getMax = object => {\n            return Object.keys(object).filter(x => {\n                 return object[x] == Math.max.apply(null, \n                 Object.values(object));\n            });\n          };\n\n          const userGenre = getMax(wordCounts).toString();\n          const song_seed = songIDS.split(','); //get user's top song for recommendation seed\n          console.log(artistID)\n          // Get 20 recommendations of content based for the user\n          fetch(\"https://api.spotify.com/v1/recommendations?limit=20&market=ES&seed_artists=\" + artistID + \"&seed_genres=\" + userGenre +\n                    \"&seed_tracks=\" + song_seed[0] + \"&target_acousticness=\" + avg_acous + \"&target_duration_ms=\" + avg_duration + \n                    \"&target_energy=\" + avg_energy + \"&target_instrumentalness=\" + avg_instr + \"&target_key=\" + avg_key + \"&target_liveness=\" + avg_liveness +\n                    \"&target_loudness=\" + avg_loud + \"&target_tempo=\" + avg_tempo + \"&target_valence=\" + avg_val, {\n              method: 'GET',\n              headers: {'Accept': 'application/json', 'Content-Type': 'application/json' ,'Authorization': 'Bearer ' + accessToken}\n          }).then(response => response.json())\n          //.then(data => console.log(data))\n          .then(data => {\n            if(!data){\n              return;\n            }else{\n              data.tracks.map(song =>{\n                recom_songs.push(song.name)                       // song name\n                recom_songs_audio.push(song.preview_url)          // audio sample of song\n                recom_songs_img.push(song.album.images[2].url)    // small album image\n              })\n\n              this.setState({\n                songs: recom_songs,\n                songs_img: recom_songs_img,\n                songs_audio: recom_songs_audio\n              })\n            }\n          });\n          //console.log([recom_songs, recom_songs_audio, recom_songs_img]);\n    });\n  }\n\n\n  render() {\n\t   \n    // let ids = this.props.songID\n    // let token = this.props.token\n    // let artistID = this.props.artistID\n    // let genres = this.props.genres\n    \n    console.log(this.state.songs)\n\n    return(\n      \n      <div className=\"CB\">\n      \n            \n      {\n        Object.keys(this.state.songs).map(index =>{\n          return (\n            <ul>\n              <button><img src={this.state.songs_img[index]} style={{width: '60px'}} onClick={new Audio(this.state.songs_audio[index])}/></button> {this.state.songs[index]} <br />\n            </ul>\n          )\n        })\n      }\n      \n      </div>\n      \n    );\n\n\n  }\n    \n}\n\nexport default CBased;"]},"metadata":{},"sourceType":"module"}