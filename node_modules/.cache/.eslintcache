[{"/Users/dianatyman/Documents/GitHub/Music-Recommender-System-Eval./src/index.js":"1","/Users/dianatyman/Documents/GitHub/Music-Recommender-System-Eval./src/App.js":"2","/Users/dianatyman/Documents/GitHub/Music-Recommender-System-Eval./src/reportWebVitals.js":"3","/Users/dianatyman/Documents/GitHub/Music-Recommender-System-Eval./src/Routes.js":"4","/Users/dianatyman/Documents/GitHub/Music-Recommender-System-Eval./src/CFiltering/CollabFiltering.js":"5","/Users/dianatyman/Documents/GitHub/Music-Recommender-System-Eval./src/CBased/CBased.js":"6","/Users/dianatyman/Documents/GitHub/Music-Recommender-System-Eval./src/history.js":"7"},{"size":564,"mtime":1620041625513,"results":"8","hashOfConfig":"9"},{"size":5424,"mtime":1623827882854,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1619434625846,"results":"11","hashOfConfig":"9"},{"size":702,"mtime":1623626835966,"results":"12","hashOfConfig":"9"},{"size":9004,"mtime":1623828299156,"results":"13","hashOfConfig":"9"},{"size":6162,"mtime":1623828269274,"results":"14","hashOfConfig":"9"},{"size":84,"mtime":1620039118753,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"1mk9621",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/Users/dianatyman/Documents/GitHub/Music-Recommender-System-Eval./src/index.js",["35"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n       <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["36","37"],"/Users/dianatyman/Documents/GitHub/Music-Recommender-System-Eval./src/App.js",["38"],"import './App.css';\nimport React, { Component } from \"react\";\nimport Routes from './Routes';\nimport CBased from \"./CBased/CBased\";\nimport CFiltering from \"./CFiltering/CollabFiltering\";\n\nclass App extends Component {\n\n  \tconstructor(props){\n    \tsuper(props);\n    \tthis.state = {\n      \t\ttoken:'',\n      \t\tdataAudio:[],\n      \t\tisActive:false,\n      \t\tuserName:'',\n      \t\tsongName:[],\n      \t\tsongID:[],\n      \t\tartistID:[],\n      \t\tgenres:[],\n      \t\taudio_feat:[],\n      \t\tlimit:10\t\t\t\t\n    \t}\n  \t}\n\n  \tcomponentDidMount() {\n    \tconst url = new URL(window.location.href);\n\t\tconst accessToken = url.searchParams.get('access_token');\n\n\t\tif(!accessToken){\n    \t\treturn;\n    \t}else{\n\n\t\t  \tthis.setState({\n\t        \ttoken: accessToken\n\t    \t});\n\n\t    \t// Fetch User's profile information\n\t    \tfetch('https://api.spotify.com/v1/me', {\n\t      \t\tmethod: 'GET',\n\t      \t\theaders: {'Authorization': 'Bearer ' + accessToken}\n\t    \t}).then(response => response.json())\n\t    \t.then(data => this.setState({\n\t      \t\tuserName: data.display_name\n\t    \t}));\n\n\t    \t// Fetch User's most listened/top songs + songs id's\n\t\t    fetch('https://api.spotify.com/v1/me/top/tracks?limit=' + this.state.limit, {\n\t\t      \tmethod: 'GET',\n\t\t      \theaders: {'Accept': 'application/json', 'Content-Type': 'application/json' ,'Authorization': 'Bearer ' + accessToken}\n\t\t    }).then(response => response.json())\n\t\t    .then(data => {\n\t\t    \tif(!data){\n\t\t    \t\treturn;\n\t\t    \t}\n\t\t    \tlet id = [];\n\t\t    \t\n\t\t    \tlet ids = data.items.map(datas => {\n\t\t    \t\tif (!id.includes(datas.id)){\n\t      \t\t\t\tid.push(datas.id)\n\t\t        \t};\n\t\t        \t\n\t\t        \treturn id;\n\t\t    \t})\n\t\t    \tthis.setState({\n\t\t    \t\tsongID: ids[0]\n\t\t    \t})\n\t\t    });\n\n\t\t    // Fetch User's top 3 artists -- nedeed for spotify's api content based recommendations\n\t\t    fetch('https://api.spotify.com/v1/me/top/artists?limit=3', {\n\t\t      \tmethod: 'GET',\n\t\t      \theaders: {'Accept': 'application/json', 'Content-Type': 'application/json' ,'Authorization': 'Bearer ' + accessToken}\n\t\t    }).then(response => response.json())\n\t\t    .then(data => {\n\t\t    \tif(!data){\n\t\t    \t\treturn;\n\t\t    \t}\n\t\t    \t\n\t\t    \tlet id = []\n\t\t    \tlet gen = []\n\t\t    \tlet ids = data.items.map(datas => {\n\t\t    \t\tif (!id.includes(datas.id)){\n\t      \t\t\t\tid.push(datas.id)\n\t\t        \t};\n\n\t\t        \treturn id;\n\t\t    \t})\n\n\t\t    \tlet genre = data.items.map(datas => {\n\t\t    \t\tif(!gen.includes(datas.genres)){\n\t\t    \t\t\tgen.push(datas.genres)\n\t\t    \t\t};\n\n\t\t    \t\tthis.setState({\n\t\t    \t\t\tgenres: gen.flat()\n\t\t    \t\t});\n\n\t\t    \t\treturn gen;\n\t\t    \t})\n\t\t    \t\n\t\t    \tthis.setState({\n\t\t    \t\tartistID: ids[0]\n\t\t    \t})\n\n\t\t    \t\n\t\t    });\n\t\t}\n\n  \t}\n\n\n  \tshowHandler = ()=>{\n      \tthis.setState({\n        \tisActive: true\n      \t})\n  \t}\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Routes />\n        {this.state.isActive ? \n        \t\n        \t<div>\n        \t<header className=\"App-header\">\n\t        <h1>Music Recommendation System Evaluation</h1>\n\t        <p>\n\t          Thank you for taking part of this evaluation {this.state.userName}! \n\t          This is a music recommendation system where you as a user can decide which recommendation algorithm you enjoy better. \n\t          This web-app is part of my final project for my degree in data science imparted by University Pompeu Fabra.\n\t        </p>\n\t        <p> Please Scroll Down </p>\n\t        </header>\n\t        <br />\n\t        <br />\n\t        <h1 style={{'fontSize': '25px','marginTop': '5px', 'textAlign': 'left', 'border': '3px solid #9DC183', 'padding': '10px'}}>Content Based Recommendations for {this.state.userName} </h1>\n\t        <h4>Content Based recommendations uses item features to recommend other songs similar to what you as a user currently like, based on your previous actions or explicit feedback </h4>\n\t        <h4>You can click on the name of the song to hear a snippet of it, unfortunately not all songs may have snippets...</h4>\n\t        <CBased songID={this.state.songID.toString()} token={this.state.token} artistID={this.state.artistID.toString()} genres={this.state.genres.toString()} />\n\t        \n\t        <br />\n\t        <br />\n\t        <h1 style={{'fontSize': '25px','marginTop': '5px', 'textAlign': 'left', 'border': '3px solid #9DC183', 'padding': '10px'}}>Collaborative Filtering Recommendations for {this.state.userName} </h1>\n\t        <h4>Collaborative Filtering recommendations are based from a method of making automatic predictions (filtering) about the interests of a user by collecting preferences from many users, in this case your Spotify friends.</h4>\n\t        <h4>You can click on the name of the song to hear a snippet of it, unfortunately not all songs may have snippets...</h4>\n\t        <CFiltering userName={this.state.userName} token={this.state.token} artistID={this.state.artistID.toString()} genres={this.state.genres.toString()} />\n\n\t        </div> : <button onClick={() => {\n            \t\t\t\twindow.location = window.location.href.includes('localhost') \n              \t\t\t\t? 'http://localhost:8888/login' \n              \t\t\t\t: 'https://music-recommender-eval-backend.herokuapp.com/login' }\n          \t\t\t\t}>Sign in with Spotify</button>                                                                      \n\n        } \n        <div>{!this.state.isActive && <button onClick={this.showHandler}>Click here to continue</button>}</div>\n        \n\n      </div> \n     \n    );\n  }\n  \n}\n\nexport default App;\n","/Users/dianatyman/Documents/GitHub/Music-Recommender-System-Eval./src/reportWebVitals.js",[],"/Users/dianatyman/Documents/GitHub/Music-Recommender-System-Eval./src/Routes.js",[],"/Users/dianatyman/Documents/GitHub/Music-Recommender-System-Eval./src/CFiltering/CollabFiltering.js",["39","40","41","42","43","44","45","46","47","48","49"],"import './CollabFiltering.css';\nimport React, {Component} from \"react\";\n\nclass CollabFiltering extends Component{\n\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tsong_name:[],\n\t\t\talbum_img:[],\n\t\t\taudio:[],\n\t\t\tartist:[],\n\t\t\tfull: false\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tlet userName = this.props.userName\n\t\tlet token = this.props.token\n\t\tlet artistID = this.props.artistID\n    \tlet genres = this.props.genres\n\n    \tif (!token)\n      \t\treturn;\n\n\t\tconst playID_Disc = []\n\t\tconst playID_collab = []\n\n\t\tconst recom_songs = [];\n\t    const recom_songs_audio = [];\n\t    const recom_songs_img = [];\n\t    const artistName = [];\n\n\t\tfetch(\"https://api.spotify.com/v1/users/\" + userName + \"/playlists?limit=50\", {\n\t\t      \tmethod: 'GET',\n\t\t      \theaders: {'Authorization': 'Bearer ' + token}\n\t\t    }).then(response => response.json())\n\t\t    .then(data => {\n\t\t    \tdata.items.map(playlist => {\n\t\t    \t\tif(playlist.name == \"Descubrimiento semanal\" || playlist.name == \"Discover Weekly\"){\n\t\t    \t\t\tplayID_Disc.push(playlist.id)\n\t\t    \t\t}\n\n\t\t    \t\tif(playlist.collaborative){\n\t\t    \t\t\tplayID_collab.push(playlist.id)\n\t\t    \t\t}\n\t\t    \t\t\n\t\t    \t});\n\n\t\t    \t// Get Discover Weekly Collab Filtering Recomm's\n\t\t    \tif(playID_Disc.length > 0){\n\t\t    \t\tplayID_Disc.map(playlist => {\n\t\t    \t\t\tfetch(\"https://api.spotify.com/v1/playlists/\" + playlist + \"/tracks?market=ES&limit=20\", {\n\t\t    \t\t\t\tmethod: 'GET',\n\t\t      \t\t\t\theaders: {'Authorization': 'Bearer ' + token}\n\t\t    \t\t\t}).then(response => response.json())\n\t\t    \t\t\t.then(data => {\n\t\t    \t\t\t\tif(!data){\n\t\t    \t\t\t\t\treturn;\n\t\t    \t\t\t\t}else{\n\t\t\t    \t\t\t\tdata.items.map(dts =>{\n\t\t\t    \t\t\t\t\trecom_songs.push(dts.track.name)                       // song name\n\t\t\t\t\t                recom_songs_audio.push(dts.track.preview_url)          // audio sample of song\n\t\t\t\t\t                recom_songs_img.push(dts.track.album.images[2].url)    // small album image\n\t\t\t\t\t                artistName.push(dts.track.artists[0].name)\n\t\t\t    \t\t\t\t})\n\n\t\t\t    \t\t\t\tthis.setState({\n\t\t    \t\t\t\t\t\tsong_name: recom_songs,\n\t\t    \t\t\t\t\t\talbum_img: recom_songs_img,\n\t\t    \t\t\t\t\t\taudio: recom_songs_audio,\n\t\t    \t\t\t\t\t\tartist: artistName,\n\t\t    \t\t\t\t\t\tfull: true\n\t\t    \t\t\t\t\t})\n\t\t\t    \t\t\t}\n\t\t\t    \t\t\t\n\t\t    \t\t\t})\n\t\t    \t\t})\n\t\t    \t}else if(playID_collab.length > 0){\n\n\t\t    \t\tconst songIDS = []\n\n\t\t    \t\t// Get audio analysis features from the user's songs\n\t\t\t\t    const energy = [];      //low level feature\n\t\t\t\t    const key = [];         //high level feature\n\t\t\t\t    const loudness = [];    //low level feature -- can be negative\n\t\t\t\t    const acoustic = [];    //low level feature (?)\n\t\t\t\t    const instrum = [];     //low level feature (?)\n\t\t\t\t    const liveness = [];    //low level feature (?)\n\t\t\t\t    const valence = [];     //low level feature (?)\n\t\t\t\t    const tempo = [];       //high level feature\n\t\t\t\t    const duration = [];    //song duration in ms!\n\n\t\t\t\t    const recom_songs = [];\n\t\t\t\t    const recom_songs_audio = [];\n\t\t\t\t    const recom_songs_img = [];\n\t\t\t\t    const artistName = [];\n\n\t\t    \t\tplayID_collab.map(playlist => {\n\t\t    \t\t\tfetch(\"https://api.spotify.com/v1/playlists/\" + playlist + \"/tracks?market=ES&limit=20\", {\n\t\t    \t\t\t\tmethod: 'GET',\n\t\t      \t\t\t\theaders: {'Authorization': 'Bearer ' + token}\n\t\t    \t\t\t}).then(response => response.json())\n\t\t    \t\t\t.then(data => {\n\t\t    \t\t\t\tdata.items.map(dts =>{\n\t\t    \t\t\t\t\tsongIDS.push(dts.track.id)\n\t\t    \t\t\t\t})\n\n\t\t    \t\t\t\tfetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS.toString(), {\n\t\t\t\t\t\t\t      method: 'GET',\n\t\t\t\t\t\t\t      headers: {'Accept': 'application/json', 'Content-Type': 'application/json' , 'Authorization': 'Bearer ' + token}\n\t\t\t\t\t\t\t    }).then(response => response.json())\n\t\t\t\t\t\t\t    .then(data => {\n\t\t\t\t\t\t\t      // if(!data.audio_features){\n\t\t\t\t\t\t\t      //     return;\n\t\t\t\t\t\t\t      //   }else{\n\t\t\t\t\t\t\t          data.audio_features.map((audio, i) => {\n\t\t\t\t\t\t\t            // if(!audio){\n\t\t\t\t\t\t\t            //   return;\n\t\t\t\t\t\t\t            // }\n\t\t\t\t\t\t\t            energy.push(Number(audio.energy))\n\t\t\t\t\t\t\t            key.push(audio.key)\n\t\t\t\t\t\t\t            loudness.push(audio.loudness)\n\t\t\t\t\t\t\t            acoustic.push(audio.acousticness)\n\t\t\t\t\t\t\t            instrum.push(audio.instrumentalness)\n\t\t\t\t\t\t\t            liveness.push(audio.liveness)\n\t\t\t\t\t\t\t            valence.push(audio.valence)\n\t\t\t\t\t\t\t            tempo.push(audio.tempo)\n\t\t\t\t\t\t\t            duration.push(audio.duration_ms)\n\t\t\t\t\t\t\t          });\n\t\t\t\t\t\t\t          const avg_energy = (energy.reduce((sum, curr) => sum + curr, 0)/energy.length).toFixed(3) ;            \n\t\t\t\t\t\t\t          const avg_key = (key.reduce((sum, curr) => sum + curr, 0)/key.length).toFixed() ;                     \n\t\t\t\t\t\t\t          const avg_loud = (loudness.reduce((sum, curr) => sum + curr, 0)/loudness.length).toFixed(3) ;          \n\t\t\t\t\t\t\t          const avg_acous = (acoustic.reduce((sum, curr) => sum + curr, 0)/acoustic.length).toFixed(3) ;           \n\t\t\t\t\t\t\t          const avg_instr = (instrum.reduce((sum, curr) => sum + curr, 0)/instrum.length).toFixed(3) ;           \n\t\t\t\t\t\t\t          const avg_liveness = (liveness.reduce((sum, curr) => sum + curr, 0)/liveness.length).toFixed(3) ;      \n\t\t\t\t\t\t\t          const avg_val = (valence.reduce((sum, curr) => sum + curr, 0)/valence.length).toFixed(3) ;\n\t\t\t\t\t\t\t          const avg_tempo = (tempo.reduce((sum, curr) => sum + curr, 0)/tempo.length).toFixed(3) ;\n\t\t\t\t\t\t\t          const avg_duration = (duration.reduce((sum, curr) => sum + curr, 0)/duration.length).toFixed() ;      \n\n\t\t\t\t\t\t\t          // Get the most popular genre of the user\n\t\t\t\t\t\t\t          const words = genres.split(',');\n\t\t\t\t\t\t\t          const wordCounts = { };\n\n\t\t\t\t\t\t\t          for(var i = 0; i < words.length; i++)\n\t\t\t\t\t\t\t            wordCounts[words[i]] = (wordCounts[words[i]] || 0) + 1;\n\n\t\t\t\t\t\t\t          const getMax = object => {\n\t\t\t\t\t\t\t            return Object.keys(object).filter(x => {\n\t\t\t\t\t\t\t                 return object[x] == Math.max.apply(null, \n\t\t\t\t\t\t\t                 Object.values(object));\n\t\t\t\t\t\t\t            });\n\t\t\t\t\t\t\t          };\n\t\t\t\t\t\t\t          \n\t\t\t\t\t\t\t          const userGenreMAX = getMax(wordCounts) \t\t\t// get most popular genre among user's song\n          \t\t\t\t\t\t\t  const userGenre = userGenreMAX[0].toString();\n\t\t\t\t\t\t\t          const song_seed = songIDS; \t\t\t\t\t\t//get user's top song for recommendation seed\n\t\t\t\t\t\t\t          \n\t\t\t\t\t\t\t          // Get 20 recommendations of content based for the user\n\t\t\t\t\t\t\t          fetch(\"https://api.spotify.com/v1/recommendations?limit=20&market=ES&seed_artists=\" + artistID + \"&seed_genres=\" + userGenre +\n\t\t\t\t\t\t\t                    \"&seed_tracks=\" + song_seed[0] + \"&target_acousticness=\" + avg_acous + \"&target_duration_ms=\" + avg_duration + \n\t\t\t\t\t\t\t                    \"&target_energy=\" + avg_energy + \"&target_instrumentalness=\" + avg_instr + \"&target_key=\" + avg_key + \"&target_liveness=\" + avg_liveness +\n\t\t\t\t\t\t\t                    \"&target_loudness=\" + avg_loud + \"&target_tempo=\" + avg_tempo + \"&target_valence=\" + avg_val, {\n\t\t\t\t\t\t\t              method: 'GET',\n\t\t\t\t\t\t\t              headers: {'Accept': 'application/json', 'Content-Type': 'application/json' ,'Authorization': 'Bearer ' + token, 'Access-Control-Allow-Origin': 'origin-list'}\n\t\t\t\t\t\t\t          }).then(response => response.json())\n\t\t\t\t\t\t\t          .then(data => {\n\t\t\t\t\t\t\t            if(!data){\n\t\t\t\t\t\t\t              return;\n\t\t\t\t\t\t\t            }else{\n\t\t\t\t\t\t\t              \n\t\t\t\t\t\t\t              data.tracks.map(song =>{\n\t\t\t\t\t\t\t                recom_songs.push(song.name)                       // song name\n\t\t\t\t\t\t\t                recom_songs_audio.push(song.preview_url)          // audio sample of song\n\t\t\t\t\t\t\t                recom_songs_img.push(song.album.images[2].url)    // small album image\n\t\t\t\t\t\t\t                artistName.push(song.artists[0].name)\t\t\t  // artists name\n\t\t\t\t\t\t\t              })\n\n\t\t\t\t\t\t\t              this.setState({\n\t\t\t\t\t\t\t                song_name: recom_songs,\n\t\t\t\t\t\t\t                album_img: recom_songs_img,\n\t\t\t\t\t\t\t                audio: recom_songs_audio,\n\t\t\t\t\t\t\t                artist: artistName,\n\t\t\t\t\t\t\t                full: true\n\t\t\t\t\t\t\t              })\n\t\t\t\t\t\t\t            }\n\t\t\t\t\t\t\t          });\n\t\t\t\t\t\t\t        \n\t\t\t\t\t\t\t    });\n\t\t    \t\t\t});\n\t\t    \t\t})\n\t\t    \t}else{\n\n\t\t    \t\treturn;\n\t\t    \t}\n\t\t    });\n\t}\n\n\trender() {\n\n\t\tif(this.state.full){\n\t\t\treturn(\n\t\t      <div className=\"CF\">\n\t\t      \t{\n\t\t\t        Object.keys(this.state.artist).map(index =>{\n\t\t\t          return (\n\t\t\t            <ul>\n\t\t\t              <a href={this.state.audio[index]} target={\"_blank\"} rel=\"noreferrer\">\n\t\t\t              <img src={this.state.album_img[index]} style={{width: '60px'}}/> {this.state.song_name[index] + \" - \" + this.state.artist[index]} <br />\n\t\t\t              </a>\n\t\t\t            </ul>\n\t\t\t            \n\t\t\t          )\n\t\t\t        })\n\t\t      }\n\t\t      </div>\n\t     \t)\n\t\t}else{\n\t\t\treturn(\n\t\t\t\t<div className=\"CF\">\n\t\t\t\t\t<p>Sorry, unfortunately you do not have enough data to create the collaborative filtering recommendations.</p>\n\t\t\t\t</div>\n\t\t\t)\n\t\t\t\n\t     \n    \t}\n\t}\n}\n\nexport default CollabFiltering;\n","/Users/dianatyman/Documents/GitHub/Music-Recommender-System-Eval./src/CBased/CBased.js",["50","51","52","53"],"import './CBased.css';\nimport React, {Component} from \"react\";\n\nclass CBased extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n      songs:[],\n      songs_audio:[],\n      songs_img:[],\n      artName:[],\n      full: false\n    }\n  }\n\n  \n  componentDidMount() {\n\n    let songIDS = this.props.songID\n    let accessToken = this.props.token\n    let artistID = this.props.artistID\n    let genres = this.props.genres\n\n    if (!accessToken)\n      return;\n    // Get audio analysis features from the user's songs\n    const energy = [];      //low level feature\n    const key = [];         //high level feature\n    const loudness = [];    //low level feature -- can be negative\n    const acoustic = [];    //low level feature (?)\n    const instrum = [];     //low level feature (?)\n    const liveness = [];    //low level feature (?)\n    const valence = [];     //low level feature (?)\n    const tempo = [];       //high level feature\n    const duration = [];    //song duration in ms!\n\n    const recom_songs = [];\n    const recom_songs_audio = [];\n    const recom_songs_img = [];\n    const artistName = [];\n\n    fetch('https://api.spotify.com/v1/audio-features?ids=' + songIDS, {\n      method: 'GET',\n      headers: {'Accept': 'application/json', 'Content-Type': 'application/json' , 'Authorization': 'Bearer ' + accessToken}\n    }).then(response => response.json())\n    .then(data => {\n      if(!data.audio_features){\n          return;\n        }\n          \n          data.audio_features.map((audio, i) => {\n            \n            energy.push(Number(audio.energy))\n            key.push(audio.key)\n            loudness.push(audio.loudness)\n            acoustic.push(audio.acousticness)\n            instrum.push(audio.instrumentalness)\n            liveness.push(audio.liveness)\n            valence.push(audio.valence)\n            tempo.push(audio.tempo)\n            duration.push(audio.duration_ms)\n          });\n          const avg_energy = (energy.reduce((sum, curr) => sum + curr, 0)/energy.length).toFixed(3) ;            \n          const avg_key = (key.reduce((sum, curr) => sum + curr, 0)/key.length).toFixed() ;                     \n          const avg_loud = (loudness.reduce((sum, curr) => sum + curr, 0)/loudness.length).toFixed(3) ;          \n          const avg_acous = (acoustic.reduce((sum, curr) => sum + curr, 0)/acoustic.length).toFixed(3) ;           \n          const avg_instr = (instrum.reduce((sum, curr) => sum + curr, 0)/instrum.length).toFixed(3) ;           \n          const avg_liveness = (liveness.reduce((sum, curr) => sum + curr, 0)/liveness.length).toFixed(3) ;      \n          const avg_val = (valence.reduce((sum, curr) => sum + curr, 0)/valence.length).toFixed(3) ;\n          const avg_tempo = (tempo.reduce((sum, curr) => sum + curr, 0)/tempo.length).toFixed(3) ;\n          const avg_duration = (duration.reduce((sum, curr) => sum + curr, 0)/duration.length).toFixed() ;      \n\n          // Get the most popular genre of the user\n          const words = genres.split(',');\n          const wordCounts = { };\n\n          for(var i = 0; i < words.length; i++)\n            wordCounts[words[i]] = (wordCounts[words[i]] || 0) + 1;\n\n          const getMax = object => {\n            return Object.keys(object).filter(x => {\n                 return object[x] == Math.max.apply(null, \n                 Object.values(object));\n            });\n          };\n\n          const userGenreMAX = getMax(wordCounts)           // get most popular genre among user's song\n          const userGenre = userGenreMAX[0].toString();\n          const song_seed = songIDS.split(',');             //get user's top song for recommendation seed\n\n          // Get 20 recommendations of content based for the user\n          fetch(\"https://api.spotify.com/v1/recommendations?limit=20&market=ES&seed_artists=\" + artistID + \"&seed_genres=\" + userGenre +\n                    \"&seed_tracks=\" + song_seed[0] + \"&target_acousticness=\" + avg_acous + \"&target_duration_ms=\" + avg_duration + \n                    \"&target_energy=\" + avg_energy + \"&target_instrumentalness=\" + avg_instr + \"&target_key=\" + avg_key + \"&target_liveness=\" + avg_liveness +\n                    \"&target_loudness=\" + avg_loud + \"&target_tempo=\" + avg_tempo + \"&target_valence=\" + avg_val, {\n              method: 'GET',\n              headers: {'Accept': 'application/json', 'Content-Type': 'application/json' ,'Authorization': 'Bearer ' + accessToken, 'Access-Control-Allow-Origin': 'origin-list'}\n          }).then(response => response.json())\n          .then(data => {\n            if(!data){\n              return;\n            }else{\n              console.log(data)\n              data.tracks.map(song =>{\n                recom_songs.push(song.name)                       // song name\n                recom_songs_audio.push(song.preview_url)          // audio sample of song\n                recom_songs_img.push(song.album.images[2].url)    // small album image\n                artistName.push(song.artists[0].name)             // artists name\n              })\n\n              this.setState({\n                songs: recom_songs,\n                songs_img: recom_songs_img,\n                songs_audio: recom_songs_audio,\n                artName: artistName,\n                full: true\n              })\n            }\n          });\n    });\n  }\n\n\n  render() {\n\t   \n      if(this.state.full){\n        return(\n          \n          <div className=\"CB\">\n          {\n            Object.keys(this.state.songs).map(index =>{\n              return (\n                <ul>\n                  <a href={this.state.songs_audio[index]} target={\"_blank\"} rel=\"noreferrer\">\n                  <img src={this.state.songs_img[index]} style={{width: '60px'}}/> {this.state.songs[index] + \" - \" + this.state.artName[index]} <br />\n                  </a>\n                </ul>\n              )\n            })\n          }\n          \n          </div>\n          \n        );\n      }else{\n\n        return(\n          <div className=\"CB\">\n            <p>The recommended songs are not loading...please recharge the web page, excuse the inconvenience.</p>\n          </div>\n        );\n      }\n  }\n    \n}\n\nexport default CBased;","/Users/dianatyman/Documents/GitHub/Music-Recommender-System-Eval./src/history.js",[],{"ruleId":"54","severity":1,"message":"55","line":3,"column":27,"nodeType":"56","messageId":"57","endLine":3,"endColumn":33},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"54","severity":1,"message":"62","line":89,"column":12,"nodeType":"56","messageId":"57","endLine":89,"endColumn":17},{"ruleId":"63","severity":1,"message":"64","line":39,"column":32,"nodeType":"65","messageId":"66","endLine":39,"endColumn":34},{"ruleId":"67","severity":1,"message":"68","line":40,"column":26,"nodeType":"69","messageId":"70","endLine":40,"endColumn":28},{"ruleId":"67","severity":1,"message":"68","line":40,"column":71,"nodeType":"69","messageId":"70","endLine":40,"endColumn":73},{"ruleId":"63","severity":1,"message":"64","line":52,"column":34,"nodeType":"65","messageId":"66","endLine":52,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":61,"column":31,"nodeType":"65","messageId":"66","endLine":61,"endColumn":33},{"ruleId":"63","severity":1,"message":"64","line":99,"column":36,"nodeType":"65","messageId":"66","endLine":99,"endColumn":38},{"ruleId":"63","severity":1,"message":"64","line":105,"column":30,"nodeType":"65","messageId":"66","endLine":105,"endColumn":32},{"ruleId":"63","severity":1,"message":"64","line":117,"column":53,"nodeType":"65","messageId":"66","endLine":117,"endColumn":55},{"ruleId":"67","severity":1,"message":"68","line":150,"column":42,"nodeType":"69","messageId":"70","endLine":150,"endColumn":44},{"ruleId":"63","severity":1,"message":"64","line":172,"column":43,"nodeType":"65","messageId":"66","endLine":172,"endColumn":45},{"ruleId":"71","severity":1,"message":"72","line":209,"column":18,"nodeType":"73","endLine":209,"endColumn":82},{"ruleId":"63","severity":1,"message":"64","line":52,"column":46,"nodeType":"65","messageId":"66","endLine":52,"endColumn":48},{"ruleId":"67","severity":1,"message":"68","line":83,"column":35,"nodeType":"69","messageId":"70","endLine":83,"endColumn":37},{"ruleId":"63","severity":1,"message":"64","line":105,"column":36,"nodeType":"65","messageId":"66","endLine":105,"endColumn":38},{"ruleId":"71","severity":1,"message":"72","line":136,"column":19,"nodeType":"73","endLine":136,"endColumn":83},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["74"],"no-negated-in-lhs",["75"],"'genre' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]